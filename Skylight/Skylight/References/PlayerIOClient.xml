<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PlayerIOClient</name>
    </assembly>
    <members>
        <member name="T:PlayerIOClient.PartnerPay">
            <summary>
            The Player.IO PartnerPay service.
            <para>Here's how to connect to Player.IO and setting a partner id:</para>
            <code>
            //Connecting to Player.IO and setting a partner id
            var client = PlayerIO.Connect(
            	"[Enter your game id here]",
            	"public",
            	"user-id",
            	null,
            	"partner-id"
            );
            </code>
            
            <para>This is how you check and set the partner id of a user:</para>
            <code>
            if (String.IsNullOrEmpty(client.PartnerPay.CurrentPartner)) {
            	client.PartnerPay.SetTag("partner-id");
            }
            </code>
            
            <para>Finally, here's how to trigger a custom action:</para>
            <code>
            client.PartnerPay.Trigger("levelfive");
            </code>
            </summary>
        </member>
        <member name="M:PlayerIOClient.PartnerPay.Trigger(System.String)">
            <summary>Triggers the custom PartnerPay action identified by the given key</summary>
            <param name="key">The key of the action</param>
        </member>
        <member name="M:PlayerIOClient.PartnerPay.Trigger(System.String,System.UInt32)">
            <summary>Triggers the custom PartnerPay action identified by the given key</summary>
            <param name="key">The key of the action</param>
            <param name="count">The number of actions to trigger</param>
        </member>
        <member name="M:PlayerIOClient.PartnerPay.Trigger(System.String,PlayerIOClient.Callback)">
            <summary>Triggers the custom PartnerPay action identified by the given key</summary>
            <param name="key">The key of the action</param>
            <param name="successCallback">Callback that will be called if the action is succesful.</param>
        </member>
        <member name="M:PlayerIOClient.PartnerPay.Trigger(System.String,PlayerIOClient.Callback,PlayerIOClient.Callback{PlayerIOClient.PlayerIOError})">
            <summary>Triggers the custom PartnerPay action identified by the given key</summary>
            <param name="key">The key of the action</param>
            <param name="successCallback">Callback that will be called if the action is succesful.</param>
            <param name="errorCallback">Callback that will be called instead of successCallback if an error occurs.</param>
        </member>
        <member name="M:PlayerIOClient.PartnerPay.Trigger(System.String,System.UInt32,PlayerIOClient.Callback)">
            <summary>Triggers the custom PartnerPay action identified by the given key</summary>
            <param name="key">The key of the action</param>
            <param name="count">The number of actions to trigger</param>
            <param name="successCallback">Callback that will be called if the action is succesful.</param>
        </member>
        <member name="M:PlayerIOClient.PartnerPay.Trigger(System.String,System.UInt32,PlayerIOClient.Callback,PlayerIOClient.Callback{PlayerIOClient.PlayerIOError})">
            <summary>Triggers the custom PartnerPay action identified by the given key</summary>
            <param name="key">The key of the action</param>
            <param name="count">The number of actions to trigger</param>
            <param name="successCallback">Callback that will be called if the action is succesful.</param>
            <param name="errorCallback">Callback that will be called instead of successCallback if an error occurs.</param>
        </member>
        <member name="M:PlayerIOClient.PartnerPay.SetTag(System.String)">
            <summary>Set (or change) the PartnerPay partner id of the connected user</summary>
            <param name="partnerId">The PartnerPay partner id</param>
        </member>
        <member name="M:PlayerIOClient.PartnerPay.SetTag(System.String,PlayerIOClient.Callback)">
            <summary>Set (or change) the PartnerPay partner id of the connected user</summary>
            <param name="partnerId">The PartnerPay partner id</param>
            <param name="successCallback">Callback that will be called if the action is succesful.</param>
        </member>
        <member name="M:PlayerIOClient.PartnerPay.SetTag(System.String,PlayerIOClient.Callback,PlayerIOClient.Callback{PlayerIOClient.PlayerIOError})">
            <summary>Set (or change) the PartnerPay partner id of the connected user</summary>
            <param name="partnerId">The PartnerPay partner id</param>
            <param name="successCallback">Callback that will be called if the action is succesful.</param>
            <param name="errorCallback">Callback that will be called instead of successCallback if an error occurs.</param>
        </member>
        <member name="P:PlayerIOClient.PartnerPay.CurrentPartner">
            <summary>
            The current partner id of the connected user, if any.
            </summary>
        </member>
        <member name="T:PlayerIOClient.PayVault">
            <summary>
            The Player.IO PayVault.
            
            <para>Instances of this class represent a specific user's Vault, and contains methods and properties both for inspecting and manipulating the contents.</para>
            <para>All properties and methods that inspect the Vault requires that it is up-to-date first. This can be achieved explicitly by calling the Refresh() method
            or implicitly by calling any method which modifies the Vault. </para>
            
            <para>Here is how to read the Coins balance:</para>
            <code>
            PayVault vault = client.PayVault;
            vault.Refresh();
            int coins = vault.Coins;
            </code>
            
            <para>This is how you check if an item exists:</para>
            <code>
            PayVault vault = client.PayVault;
            vault.Refresh();
            if (vault.Has("simplecar")) {
            	//...
            }
            </code>
            
            <para>Credit and Debit can be used like this:</para>
            <code>
            PayVault vault = client.PayVault;
            vault.Credit(100, "New player bonus", delegate(){
            	int newcoins = vault.Coins;
            	//Show new amount to user.
            });
            
            vault.Debit(10, "Race starting fee", delegate() {
            	//Let player start race
            }
            </code>
            
            <para>Buying items with Coins is really easy. This requires that you have created an item in the PayVaultItems table in BigDB with the key "speedboost", and a property "PriceCoins" containing the price.</para>
            <code>
            PayVault vault = client.PayVault;
            vault.Buy(true, new BuyItemInfo[]{
            	new BuyItemInfo("speedboost")
            }, delegate() {
            	int boosts = vault.Count("speedboost");
            	//Show new number of boosts to user.
            });
            </code>
            
            <para>And here's how to consume an item:</para>
            <code>
            PayVault vault = client.PayVault;
            vault.Refresh();
            VaultItem boost = vault.First("speedboost");
            if (boost != null) {
            	vault.Consume(new VaultItem[]{boost}, delegate() {
            		//Boost the player's car
            	});
            }
            </code>
            
            <para>When it's time for a user to add more Coins, you can do it like this:</para>
            <code>
            PayVault vault = client.PayVault;
            vault.GetBuyCoinsInfo("socialgold",
            	new Dictionary&lt;string, string&gt;(){{"offerid", "..."}},
            	delegate(Dictionary&lt;string, string&gt; result) {
            		string url = result["socialgoldurl"];
            		//Show URL to player...
            	});
            </code>
            
            <para>And this is how to let the user buy an item directly. This requires that you have created an item in the PayVaultItems table in BigDB with the key "supercar", and a property "PriceUSD" containing the price.</para>
            <code>
            PayVault vault = client.PayVault;
            vault.GetBuyDirectInfo("paypal",
            	new Dictionary&lt;string, string&gt;(){
            		{"currency", "USD"},
            		{"item_name", "Red Supercar"}
            	},
            	new BuyItemInfo[]{
            		new BuyItemInfo("supercar").Set("Color", "Red")
            	},
            	delegate(Dictionary&lt;string, string&gt; result) {
            		string url = result["paypalurl"];
            		//Show URL to player...
            	});
            </code>
            
            <para>Finally, there are methods for retrieving the payment history of a user:</para>
            <code>
            PayVault vault = client.PayVault;
            vault.ReadHistory(0, 10, delegate(PayVaultHistoryEntry[] history) {
            	if (history.Length > 0) {
            		string lastprice = history[0].ProviderPrice;
            	}
            });
            </code>
            </summary>
        </member>
        <member name="M:PlayerIOClient.PayVault.Has(System.String)">
            <summary>
            This method checks if the Vault contains at least one item of the given itemKey. This method can only be called on an up-to-date vault.
            </summary>
            <param name="itemKey">The itemKey to check for</param>
            <returns>True if the user has at least one item of the given type (itemKey)</returns>
        </member>
        <member name="M:PlayerIOClient.PayVault.First(System.String)">
            <summary>
            Returns the first item of the given itemKey from this Vault. This method can only be called on an up-to-date vault.
            </summary>
            <param name="itemKey">The itemKey of the item to get</param>
            <returns>A VaultItem if one was found, or null if not</returns>
        </member>
        <member name="M:PlayerIOClient.PayVault.Count(System.String)">
            <summary>
            Returns the number of items of a given itemKey is in this Vault. This method can only be called on an up-to-date vault.
            </summary>
            <param name="itemKey">The itemKey of the items to count</param>
            <returns>The number of items of the given type that the user has in the vault</returns>
        </member>
        <member name="M:PlayerIOClient.PayVault.Refresh">
            <summary>Refreshes this Vault, making sure the Items and Coins are up-to-date.</summary>
        </member>
        <member name="M:PlayerIOClient.PayVault.Refresh(PlayerIOClient.Callback)">
            <summary>Refreshes this Vault, making sure the Items and Coins are up-to-date.</summary>
            <param name="successCallback">Callback that will be called when the refresh is completed</param>
        </member>
        <member name="M:PlayerIOClient.PayVault.Refresh(PlayerIOClient.Callback,PlayerIOClient.Callback{PlayerIOClient.PlayerIOError})">
            <summary>Refreshes this Vault, making sure the Items and Coins are up-to-date.</summary>
            <param name="successCallback">Callback that will be called when the refresh is completed</param>
            <param name="errorCallback">Callback that will be called instead of successCallback if an error occurs during the refresh.</param>
        </member>
        <member name="M:PlayerIOClient.PayVault.ReadHistory(System.UInt32,System.UInt32)">
            <summary>
            Loads a page of entries from this Vaults history, in reverse chronological order, i.e. newest first.
            </summary>
            <param name="page">The page of entries to load. The first page has number 0.</param>
            <param name="pageSize">The number of entries per page.</param>
            <returns>The loaded history entries, or an empty array if none were found on the given page.</returns>
        </member>
        <member name="M:PlayerIOClient.PayVault.ReadHistory(System.UInt32,System.UInt32,PlayerIOClient.Callback{PlayerIOClient.PayVaultHistoryEntry[]})">
            <summary>
            Loads a page of entries from this Vaults history, in reverse chronological order, i.e. newest first.
            </summary>
            <param name="page">The page of entries to load. The first page has number 0.</param>
            <param name="pageSize">The number of entries per page.</param>
            <param name="successCallback">Callback that will be called with the loaded PayVault history entries, or an empty array if none were found on the given page.</param>
        </member>
        <member name="M:PlayerIOClient.PayVault.ReadHistory(System.UInt32,System.UInt32,PlayerIOClient.Callback{PlayerIOClient.PayVaultHistoryEntry[]},PlayerIOClient.Callback{PlayerIOClient.PlayerIOError})">
            <summary>
            Loads a page of entries from this Vaults history, in reverse chronological order, i.e. newest first.
            </summary>
            <param name="page">The page of entries to load. The first page has number 0.</param>
            <param name="pageSize">The number of entries per page.</param>
            <param name="successCallback">Callback that will be called with the loaded PayVault history entries, or an empty array if none were found on the given page.</param>
            <param name="errorCallback">Callback that will be called instead of successCallback if an error occurs during the loading of history entries.</param>
        </member>
        <member name="M:PlayerIOClient.PayVault.Credit(System.UInt32,System.String)">
            <summary>Give coins to this Vault.</summary>
            <param name="coinAmount">The amount of coins to give.</param>
            <param name="reason">Your reason for giving the coins to this user. This will show up in the vault history, and in the PayVault admin panel for this user.</param>
        </member>
        <member name="M:PlayerIOClient.PayVault.Credit(System.UInt32,System.String,PlayerIOClient.Callback)">
            <summary>Give coins to this Vault.</summary>
            <param name="coinAmount">The amount of coins to give.</param>
            <param name="reason">Your reason for giving the coins to this user. This will show up in the vault history, and in the PayVault admin panel for this user.</param>
            <param name="successCallback">Callback that will be called if the credit is succesful.</param>
        </member>
        <member name="M:PlayerIOClient.PayVault.Credit(System.UInt32,System.String,PlayerIOClient.Callback,PlayerIOClient.Callback{PlayerIOClient.PlayerIOError})">
            <summary>Give coins to this Vault.</summary>
            <param name="coinAmount">The amount of coins to give.</param>
            <param name="reason">Your reason for giving the coins to this user. This will show up in the vault history, and in the PayVault admin panel for this user.</param>
            <param name="successCallback">Callback that will be called if the credit is succesful.</param>
            <param name="errorCallback">Callback that will be called instead of successCallback if an error occurs.</param>
        </member>
        <member name="M:PlayerIOClient.PayVault.Debit(System.UInt32,System.String)">
            <summary>Take coins from this Vault</summary>
            <param name="coinAmount">The amount of coins to take.</param>
            <param name="reason">Your reason for taking the coins from this user. This will show up in the vault history, and in the PayVault admin panel for this user.</param>
        </member>
        <member name="M:PlayerIOClient.PayVault.Debit(System.UInt32,System.String,PlayerIOClient.Callback)">
            <summary>Take coins from this Vault</summary>
            <param name="coinAmount">The amount of coins to take.</param>
            <param name="reason">Your reason for taking the coins from this user. This will show up in the vault history, and in the PayVault admin panel for this user.</param>
            <param name="successCallback">Callback that will be called if the debit is succesful.</param>
        </member>
        <member name="M:PlayerIOClient.PayVault.Debit(System.UInt32,System.String,PlayerIOClient.Callback,PlayerIOClient.Callback{PlayerIOClient.PlayerIOError})">
            <summary>Take coins from this Vault</summary>
            <param name="coinAmount">The amount of coins to take.</param>
            <param name="reason">Your reason for taking the coins from this user. This will show up in the vault history, and in the PayVault admin panel for this user.</param>
            <param name="successCallback">Callback that will be called if the debit is succesful.</param>
            <param name="errorCallback">Callback that will be called instead of successCallback if an error occurs.</param>
        </member>
        <member name="M:PlayerIOClient.PayVault.Consume(PlayerIOClient.VaultItem[])">
            <summary>Consume items in this Vault. This will cause them to be removed, but this action will not show up in the vault history.</summary>
            <param name="items">The VaultItems to use from the users vault - this should be instances from the Items array property.</param>
        </member>
        <member name="M:PlayerIOClient.PayVault.Consume(PlayerIOClient.VaultItem[],PlayerIOClient.Callback)">
            <summary>Consume items in this Vault. This will cause them to be removed, but this action will not show up in the vault history.</summary>
            <param name="items">The VaultItems to use from the users vault - this should be instances from the Items array property.</param>
            <param name="successCallback">Callback that will be called if the use is succesful.</param>
        </member>
        <member name="M:PlayerIOClient.PayVault.Consume(PlayerIOClient.VaultItem[],PlayerIOClient.Callback,PlayerIOClient.Callback{PlayerIOClient.PlayerIOError})">
            <summary>Consume items in this Vault. This will cause them to be removed, but this action will not show up in the vault history.</summary>
            <param name="items">The VaultItems to use from the users vault - this should be instances from the Items array property.</param>
            <param name="successCallback">Callback that will be called if the use is succesful.</param>
            <param name="errorCallback">Callback that will be called instead of successCallback if an error occurs.</param>
        </member>
        <member name="M:PlayerIOClient.PayVault.Buy(System.Boolean,PlayerIOClient.BuyItemInfo[])">
            <summary>Buy items with Coins.</summary>
            <param name="storeItems">If true, the items will be stored in the Vault. If false, the items will be consumed immediately after purchase.</param>
            <param name="items">A list of items to buy, together with any additional payload.</param>
        </member>
        <member name="M:PlayerIOClient.PayVault.Buy(System.Boolean,PlayerIOClient.BuyItemInfo[],PlayerIOClient.Callback)">
            <summary>Buy items with Coins.</summary>
            <param name="storeItems">If true, the items will be stored in the Vault. If false, the items will be consumed immediately after purchase.</param>
            <param name="items">A list of items to buy, together with any additional payload.</param>
            <param name="successCallback">Callback that will be called if the buy is succesful.</param>
        </member>
        <member name="M:PlayerIOClient.PayVault.Buy(System.Boolean,PlayerIOClient.BuyItemInfo[],PlayerIOClient.Callback,PlayerIOClient.Callback{PlayerIOClient.PlayerIOError})">
            <summary>Buy items with Coins.</summary>
            <param name="storeItems">If true, the items will be stored in the Vault. If false, the items will be consumed immediately after purchase.</param>
            <param name="items">A list of items to buy, together with any additional payload.</param>
            <param name="successCallback">Callback that will be called if the buy is succesful.</param>
            <param name="errorCallback">Callback that will be called instead of successCallback if an error occurs.</param>
        </member>
        <member name="M:PlayerIOClient.PayVault.Give(PlayerIOClient.BuyItemInfo[])">
            <summary>Give the user items without taking any of his coins from the vault.</summary>
            <param name="items">Each BuyItemInfo instance contains the key of the item to give in the PayVaultItems BigDB table and any additional payload.</param>
        </member>
        <member name="M:PlayerIOClient.PayVault.Give(PlayerIOClient.BuyItemInfo[],PlayerIOClient.Callback)">
            <summary>Give the user items without taking any of his coins from the vault.</summary>
            <param name="items">Each BuyItemInfo instance contains the key of the item to give in the PayVaultItems BigDB table and any additional payload.</param>
            <param name="successCallback">Callback that will be called if the give is succesfull.</param>
        </member>
        <member name="M:PlayerIOClient.PayVault.Give(PlayerIOClient.BuyItemInfo[],PlayerIOClient.Callback,PlayerIOClient.Callback{PlayerIOClient.PlayerIOError})">
            <summary>Give the user items without taking any of his coins from the vault.</summary>
            <param name="items">Each BuyItemInfo instance contains the key of the item to give in the PayVaultItems BigDB table and any additional payload.</param>
            <param name="successCallback">Callback that will be called if the give is succesfull.</param>
            <param name="errorCallback">Callback that will be called instead of successCallback if an error occurs.</param>
        </member>
        <member name="M:PlayerIOClient.PayVault.GetBuyCoinsInfo(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>Gets information about how to make a coin purchase with the specified PayVault provider.</summary>
            <param name="provider">The name of the PayVault provider to use for the coin purchase.</param>
            <param name="purchaseArguments">Any additional information that will be given to the PayVault provider to configure this purchase.</param> 
            <returns>A dictionary with PayVault provider-specific information about how to proceed with the purchase.</returns>
        </member>
        <member name="M:PlayerIOClient.PayVault.GetBuyCoinsInfo(System.String,System.Collections.Generic.Dictionary{System.String,System.String},PlayerIOClient.Callback{System.Collections.Generic.Dictionary{System.String,System.String}})">
            <summary>Gets information about how to make a coin purchase with the specified PayVault provider.</summary>
            <param name="provider">The name of the PayVault provider to use for the coin purchase.</param>
            <param name="purchaseArguments">Any additional information that will be given to the PayVault provider to configure this purchase.</param> 
            <param name="successCallback">Callback that will be called with information about how to proceed with the purchase.</param>
        </member>
        <member name="M:PlayerIOClient.PayVault.GetBuyCoinsInfo(System.String,System.Collections.Generic.Dictionary{System.String,System.String},PlayerIOClient.Callback{System.Collections.Generic.Dictionary{System.String,System.String}},PlayerIOClient.Callback{PlayerIOClient.PlayerIOError})">
            <summary>Gets information about how to make a coin purchase with the specified PayVault provider.</summary>
            <param name="provider">The name of the PayVault provider to use for the coin purchase.</param>
            <param name="purchaseArguments">Any additional information that will be given to the PayVault provider to configure this purchase.</param> 
            <param name="successCallback">Callback that will be called with information about how to proceed with the purchase.</param>
            <param name="errorCallback">Callback that will be called instead of successCallback if an error occurs.</param>
        </member>
        <member name="M:PlayerIOClient.PayVault.GetBuyDirectInfo(System.String,System.Collections.Generic.Dictionary{System.String,System.String},PlayerIOClient.BuyItemInfo[])">
            <summary>Gets information about how to make a direct item purchase with the specified PayVault provider.</summary>
            <param name="provider">The name of the PayVault provider to use for the coin purchase.</param>
            <param name="purchaseArguments">Any additional information that will be given to the PayVault provider to configure this purchase.</param> 
            <param name="items">Each BuyItemInfo instance contains the key of the item to buy and any additional payload.</param>
            <returns>A dictionary with PayVault provider-specific information about how to proceed with the purchase.</returns>
        </member>
        <member name="M:PlayerIOClient.PayVault.GetBuyDirectInfo(System.String,System.Collections.Generic.Dictionary{System.String,System.String},PlayerIOClient.BuyItemInfo[],PlayerIOClient.Callback{System.Collections.Generic.Dictionary{System.String,System.String}})">
            <summary>Gets information about how to make a direct item purchase with the specified PayVault provider.</summary>
            <param name="provider">The name of the PayVault provider to use for the coin purchase.</param>
            <param name="purchaseArguments">Any additional information that will be given to the PayVault provider to configure this purchase.</param>
            <param name="items">Each BuyItemInfo instance contains the key of the item to buy and any additional payload.</param>
            <param name="successCallback">Callback that will be called with information about how to proceed with the purchase.</param>
        </member>
        <member name="M:PlayerIOClient.PayVault.GetBuyDirectInfo(System.String,System.Collections.Generic.Dictionary{System.String,System.String},PlayerIOClient.BuyItemInfo[],PlayerIOClient.Callback{System.Collections.Generic.Dictionary{System.String,System.String}},PlayerIOClient.Callback{PlayerIOClient.PlayerIOError})">
            <summary>Gets information about how to make a direct item purchase with the specified PayVault provider.</summary>
            <param name="provider">The name of the PayVault provider to use for the coin purchase.</param>
            <param name="purchaseArguments">Any additional information that will be given to the PayVault provider to configure this purchase.</param> 
            <param name="items">Each BuyItemInfo instance contains the key of the item to buy and any additional payload.</param>
            <param name="successCallback">Callback that will be called with information about how to proceed with the purchase.</param>
            <param name="errorCallback">Callback that will be called instead of successCallback if an error occurs.</param>
        </member>
        <member name="M:PlayerIOClient.PayVault.UseBuyInfo(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>Use information from a provider to finalize a purchase with the specified PayVault provider.</summary>
            <param name="provider">The name of the PayVault provider to use.</param>
            <param name="providerArguments">The information needed to finalize this purchase.</param> 
            <returns>A dictionary with PayVault provider-specific information about the purchase.</returns>
        </member>
        <member name="M:PlayerIOClient.PayVault.UseBuyInfo(System.String,System.Collections.Generic.Dictionary{System.String,System.String},PlayerIOClient.Callback{System.Collections.Generic.Dictionary{System.String,System.String}})">
            <summary>Use information from a provider to finalize a purchase with the specified PayVault provider.</summary>
            <param name="provider">The name of the PayVault provider to use.</param>
            <param name="providerArguments">The information needed to finalize this purchase.</param> 
            <param name="successCallback">Callback that will be called with PayVault provider-specific information about the purchase.</param>
        </member>
        <member name="M:PlayerIOClient.PayVault.UseBuyInfo(System.String,System.Collections.Generic.Dictionary{System.String,System.String},PlayerIOClient.Callback{System.Collections.Generic.Dictionary{System.String,System.String}},PlayerIOClient.Callback{PlayerIOClient.PlayerIOError})">
            <summary>Use information from a provider to finalize a purchase with the specified PayVault provider.</summary>
            <param name="provider">The name of the PayVault provider to use.</param>
            <param name="providerArguments">The information needed to finalize this purchase.</param> 
            <param name="successCallback">Callback that will be called with PayVault provider-specific information about the purchase.</param>
            <param name="errorCallback">Callback that will be called instead of successCallback if an error occurs.</param>
        </member>
        <member name="P:PlayerIOClient.PayVault.Coins">
            <summary>This property contains the current coin balance of this Vault. This property can only be read on an up-to-date vault.</summary>
        </member>
        <member name="P:PlayerIOClient.PayVault.Items">
            <summary>This property contains the list of items in this Vault. This property can only be read on an up-to-date vault.</summary>
        </member>
        <member name="T:PlayerIOClient.VaultItem">
            <summary>
            Represents information about an item in a user's Vault.
            <para>The methods and properties in a VaultItem are very simliar to those of a DatabaseObject, except that it's read-only, and that there are some extra properties regarding the purchase.</para>
            <code>
            //Get a 'simplecar' from the Vault
            VaultItem car = client.PayVault.First("simplecar");
            if (car != null) {
            	string color = car.GetString("Color");
            	bool stripes = car.GetBool("Stripes");
            }
            </code>
            </summary>
        </member>
        <member name="M:PlayerIOClient.VaultItem.Contains(System.String)">
            <summary>Returns true if the given property exists on this object</summary>
        </member>
        <member name="M:PlayerIOClient.VaultItem.TryGetValue(System.String,System.Object@)">
            <summary>If the given property exists, this method returns true and the value as object in the out parameter. If it does not, this method return false</summary>
        </member>
        <member name="M:PlayerIOClient.VaultItem.GetValue(System.String)">
            <summary>Get the given property as an object</summary>
        </member>
        <member name="M:PlayerIOClient.VaultItem.GetString(System.String)">
            <summary>Get the given string property</summary>
        </member>
        <member name="M:PlayerIOClient.VaultItem.GetString(System.String,System.String)">
            <summary>Get the given string property, falling back to the given default value if the string property does not exist</summary>
        </member>
        <member name="M:PlayerIOClient.VaultItem.GetInt(System.String)">
            <summary>Get the given int property</summary>
        </member>
        <member name="M:PlayerIOClient.VaultItem.GetInt(System.String,System.Int32)">
            <summary>Get the given int property, falling back to the given default value if the int property does not exist</summary>
        </member>
        <member name="M:PlayerIOClient.VaultItem.GetUInt(System.String)">
            <summary>Get the given uint property</summary>
        </member>
        <member name="M:PlayerIOClient.VaultItem.GetUInt(System.String,System.UInt32)">
            <summary>Get the given uint property, falling back to the given default value if the uint property does not exist</summary>
        </member>
        <member name="M:PlayerIOClient.VaultItem.GetLong(System.String)">
            <summary>Get the given long property</summary>
        </member>
        <member name="M:PlayerIOClient.VaultItem.GetLong(System.String,System.Int64)">
            <summary>Get the given long property, falling back to the given default value if the long property does not exist</summary>
        </member>
        <member name="M:PlayerIOClient.VaultItem.GetBool(System.String)">
            <summary>Get the given bool property</summary>
        </member>
        <member name="M:PlayerIOClient.VaultItem.GetBool(System.String,System.Boolean)">
            <summary>Get the given bool property, falling back to the given default value if the bool property does not exist</summary>
        </member>
        <member name="M:PlayerIOClient.VaultItem.GetFloat(System.String)">
            <summary>Get the given float property</summary>
        </member>
        <member name="M:PlayerIOClient.VaultItem.GetFloat(System.String,System.Single)">
            <summary>Get the given float property, falling back to the given default value if the float property does not exist</summary>
        </member>
        <member name="M:PlayerIOClient.VaultItem.GetDouble(System.String)">
            <summary>Get the given double property</summary>
        </member>
        <member name="M:PlayerIOClient.VaultItem.GetDouble(System.String,System.Double)">
            <summary>Get the given double property, falling back to the given default value if the double property does not exist</summary>
        </member>
        <member name="M:PlayerIOClient.VaultItem.GetBytes(System.String)">
            <summary>Get the given byte array property</summary>
        </member>
        <member name="M:PlayerIOClient.VaultItem.GetBytes(System.String,System.Byte[])">
            <summary>Get the given byte array property, falling back to the given default value if the byte array property does not exist</summary>
        </member>
        <member name="M:PlayerIOClient.VaultItem.GetDateTime(System.String)">
            <summary>Get the given datetime property</summary>
        </member>
        <member name="M:PlayerIOClient.VaultItem.GetDateTime(System.String,System.DateTime)">
            <summary>Get the given datetime property, falling back to the given default value if the datetime property does not exist</summary>
        </member>
        <member name="M:PlayerIOClient.VaultItem.GetObject(System.String)">
            <summary>Get the given object property</summary>
        </member>
        <member name="M:PlayerIOClient.VaultItem.GetArray(System.String)">
            <summary>Get the given array property</summary>
        </member>
        <member name="P:PlayerIOClient.VaultItem.Id">
            <summary>The unique id of this particular vault item in the users vault</summary>
        </member>
        <member name="P:PlayerIOClient.VaultItem.ItemKey">
            <summary>The key of the underlying item in the PayVaultItems BigDB table</summary>
        </member>
        <member name="P:PlayerIOClient.VaultItem.PurchaseDate">
            <summary>The time when the vault item was originally purchased</summary>
        </member>
        <member name="P:PlayerIOClient.VaultItem.Count">
            <summary>Returns the number of properties on this object</summary>
        </member>
        <member name="P:PlayerIOClient.VaultItem.Item(System.String)">
            <summary>Get the given property as an object</summary>
        </member>
        <member name="P:PlayerIOClient.VaultItem.Properties">
            <summary>Get the names of all properties on this object</summary>
        </member>
        <member name="T:PlayerIOClient.PayVaultHistoryEntry">
            <summary>
            An entry in a user's PayVault history
            </summary>
        </member>
        <member name="P:PlayerIOClient.PayVaultHistoryEntry.Type">
            <summary>The type of this entry, for example 'buy','credit','debit'...</summary>
        </member>
        <member name="P:PlayerIOClient.PayVaultHistoryEntry.Amount">
            <summary>The coin amount of this entry.</summary>
        </member>
        <member name="P:PlayerIOClient.PayVaultHistoryEntry.Timestamp">
            <summary>When this entry was created.</summary>
        </member>
        <member name="P:PlayerIOClient.PayVaultHistoryEntry.ItemKeys">
            <summary>The item keys related to this entry (entries with type 'buy').</summary>
        </member>
        <member name="P:PlayerIOClient.PayVaultHistoryEntry.Reason">
            <summary>The developer supplied reason for entries of type 'credit' and 'debit'.</summary>
        </member>
        <member name="P:PlayerIOClient.PayVaultHistoryEntry.ProviderTransactionId">
            <summary>The transaction id from the PayVault provider corresponding to this entry.</summary>
        </member>
        <member name="P:PlayerIOClient.PayVaultHistoryEntry.ProviderPrice">
            <summary>The price in real currency of this entry formatted as a human readable currency string, e.g. $10.00 USD</summary>
        </member>
        <member name="T:PlayerIOClient.GameFS">
            <summary>
            The Player.IO GameFS Service
            <para>Here is a simple example on how to use GameFS:</para>
            <code>
            string assetUrl = client.GameFS.GetUrl("/assets/image.png");
            </code>
            </summary>
        </member>
        <member name="M:PlayerIOClient.GameFS.GetUrl(System.String)">
            <summary>Converts a GameFS path (like '/mygame.swf') into a full url, that can be downloaded over the internet. 
            <para>Important! Do not save or otherwise persist (bigdb, cookies, etc) the returned url, since the url will change over time.</para>
            </summary>
            <param name="path">The path of the file in the GameFS, including the initial slash. Examples: '/mygame.swf' or '/characters/bob.jpg'</param>
            <returns>An url that can be used to download the resource over the internet</returns>
        </member>
        <member name="M:PlayerIOClient.GameFS.GetUrl(System.String,System.Boolean)">
            <summary>Converts a GameFS path (like '/mygame.swf') into a full url, that can be downloaded over the internet. 
            <para>Important! Do not save or otherwise persist (bigdb, cookies, etc) the returned url, since the url will change over time.</para>
            </summary>
            <param name="path">The path of the file in the GameFS, including the initial slash. Examples: '/mygame.swf' or '/characters/bob.jpg'</param>
            <param name="secure">If true, this method returns a secure (https) url.</param>
            <returns>An url that can be used to download the resource over the internet</returns>
        </member>
        <member name="T:PlayerIOClient.BigDB">
            <summary>
            The Player.IO BigDB service.
            
            <para>This class is used to create, load, and delete database objects. All database objects are stored in tables and have a unique key. 
            You can set up tables in your admin panel, and you can also set up indexes there for when you want to load objects by properties
            or ranges of properties. Please note that all methods are asynchronous and any handling of results have to be done in a callback.
            If you don't care about the results of a method call, typically for create or delete functions, you can just pass in a null callback.</para>
            <para>Here's how to store and update an object:</para>
            <code>
            //Make new object and set some properties
            DatabaseObject obj = new DatabaseObject();
            obj.Set("username", "Adam");
            obj.Set("location", "London");
            obj.Set("age", 20);
            
            //Create object in table Users with ConnectUserId as key
            client.BigDB.CreateObject("Users", ConnectUserId, obj, 
            	delegate (DatabaseObject result){
            		//Change a property and store the update when created
            		result.Set("location", "Paris");
            		result.Save(null);
            	}
            );
            
            </code>
            <para>This is how you load an object:</para>
            <code>
            client.BigDB.Load("Users", ConnectUserId, delegate (DatabaseObject result){
            	if (result != null) {
            		//Change a property and save back.
            		result.Set("location", "Amsterdam");
            		result.Save(null);
            	}
            });
            </code>
            <para>In case you always want to modify an object, you can use the LoadOrCreate method to ensure you get an object back:</para>
            <code>
            client.BigDB.LoadOrCreate("Users", ConnectUserId, 
            	delegate (DatabaseObject result){
            		if (!result.Contains("username")) {
            			//Empty object, initialize it
            			result.Set("username", "Charlie");
            			result.Set("age", 20);
            		}
            		result.Set("location", "London");
            		result.Save();
            	}
            );
            </code>
            <para>
            BigDB also supports indexes for retrieving objects by a specific property, a range of properties, 
            or to sort objects by properties. Indexes need to be set up in the admin panel for each table, 
            each index needs a name, and a list of properties, and for each property you also need to specify a
            sort order.
            </para>
            <para>Imagine that we have objects that look like this:</para>
            <code>
            {
            	username:"Adam",
            	created:2010-05-12 15:28
            	location:"London",
            	age:20,
            }
            </code>
            <para>That we have defined an index called "ByUsername" that looks like this:
            	<ul>
            		<li>{Property:"username", Type:String, Order:Ascending}</li>
            	</ul>
            </para>
            <para>And an index called "ByCreated" that looks like this:
            	<ul>
            		<li>{Property:"created", Type:Datetime, Order:Descending}</li>
            	</ul>
            </para>
            <para>Then we can do lookups like these:</para>
            <code>
            //Get the object where username="Adam"
            client.BigDB.LoadSingle("Users", "ByUsername", new object[]{"Adam"}, 
            	delegate(DatabaseObject result) {
            		//...
            	}
            );
            
            //Get all users with usernames between "Adam" and "Charlie".
            //This would retrieve users named "Adamsson" and "Barney", 
            //but not users named "Abel" or "Charlotte".
            client.BigDB.LoadRange("Users", "ByUsername", null, "Adam", "Charlie", 100, 
            	delegate(DatabaseObject[] result) {
            		//...
            	}
            );
            
            //Get all users up to and including "Adam". This would retrieve 
            //users named "Aaron" and "Ackerman", but not "Adamsson" or "Barney".
            client.BigDB.LoadRange("Users", "ByUsername", null, null, "Adam", 100, 
            	delegate(DatabaseObject[] result) {
            		//...
            	}
            );
            
            //Get all users from "Xerxes". This would retrieve users named 
            //"Yngwie" and "Zed", but not "Charlie" or "Xantippa".
            client.BigDB.LoadRange("Users", "ByUsername", null, "Xerxes", null, 100, 
            	delegate(DatabaseObject[] result) {
            		//...
            	}
            );
            
            //Retrieve the ten first objects by the ByCreated index. 
            //Since that index is sorted in descending order, this will actually 
            //retrieve the 10 latest created users.
            client.BigDB.LoadRange("Users", "ByCreated", null, null, null, 10, 
            	delegate(DatabaseObject[] result) {
            		//...
            	}
            );
            
            //Get the 10 latest users that were created more than 7 days ago.
            var weekago = DateTime.Now.AddDays(-7);
            client.BigDB.LoadRange("Users", "ByCreated", null, weekago, null, 10, 
            	delegate(DatabaseObject[] result) {
            		//...
            	}
            );
            </code>
            
            <para>
            BigDB also supports compound indexes, that is indexes with more than one property. Given our example object above, we can create an index called "ByLocationAgeCreated" that looks like this:
            	<ul>
            		<li>{Property:"location", Type:String, Order:Ascending}</li>
            		<li>{Property:"age", Type:Integer, Order:Ascending}</li>
            		<li>{Property:"created", Type:Datetime, Order:Descending}</li>
            	</ul>
            </para>
            <para>
            With this index, we can then lookup on either location, or location and age, or location and age and created. If we use more than one property in the lookup, we can only specify the range for the last one, the preceding ones have to be fixed and are sent in via the path parameter.
            </para>
            <code>
            //Load all users where location is "London"
            client.BigDB.LoadRange("Users", "ByLocationAgeCreated", null, "London", 
            	"London", 100, delegate(DatabaseObject[] result) {
            		//...
            	}
            );
            
            //Load all users from London between 20 and 30 years of age
            client.BigDB.LoadRange("Users", "ByLocationAgeCreated", 
            	new object[]{"London"}, 20, 30, 100, 
            	delegate(DatabaseObject[] result) {
            		//...
            	}
            );
            
            //Load all users from London that are above 50
            client.BigDB.LoadRange("Users", "ByLocationAgeCreated", 
            	new object[]{"London"}, 50, null, 100, 
            	delegate(DatabaseObject[] result) {
            		//...
            	}
            );
            
            //Load all users from Paris that are 30 years old, and were created in April
            client.BigDB.LoadRange("Users", "ByLocationAgeCreated", 
            	new object[]{"Paris", 30}, new DateTime(2010, 4, 1), 
            	new DateTime(2010, 4, 30), 100, 
            	delegate(DatabaseObject[] result) {
            		//...
            	}
            );
            
            //Load the 10 latest 20-year old users from Amsterdam
            client.BigDB.LoadRange("Users", "ByLocationAgeCreated", 
            	new object[]{"Amsterdam", 20}, null, null, 10, 
            	delegate(DatabaseObject[] result) {
            		//...
            	}
            );
            </code>
            
            <para>Finally, deleting objects is as easy as calling the DeleteKeys method, or DeleteRange if you want to delete by an index.</para>
            <code>
            //Delete current Users object.
            client.BigDB.DeleteKeys("Users", ConnectUserId, null);
            
            //Delete all objects with usernames between "Adam" and "Charle"
            client.BigDB.DeleteRange("Users", "ByUsername", null, "Adam", 
            	"Charlie", null);
            
            //Delete all objects with created older than one year
            client.BigDB.DeleteRange("Users", "ByUsername", null, 
            	DateTime.Now.AddYear(-1), null, null);
            </code>
            </summary>
        </member>
        <member name="M:PlayerIOClient.BigDB.CreateObject(System.String,System.String,PlayerIOClient.DatabaseObject)">
            <summary>Creates a new database object in the given table with the specified key. If no key is specified (null), the object will receive an autogenerated id.</summary>
             <param name="table">The name of the table to create the database object in</param>
             <param name="key">The key to assign to the database object</param>
             <param name="obj">The database object to create in the table</param>
             <returns>A new instance of DatabaseObject from which .Save() can be called for future modifications.</returns>
        </member>
        <member name="M:PlayerIOClient.BigDB.CreateObject(System.String,System.String,PlayerIOClient.DatabaseObject,PlayerIOClient.Callback{PlayerIOClient.DatabaseObject})">
            <summary>Creates a new database object in the given table with the specified key. If no key is specified (null), the object will receive an autogenerated id.</summary>
             <param name="table">The name of the table to create the database object in</param>
             <param name="key">The key to assign to the database object</param>
             <param name="obj">The database object to create in the table</param>
             <param name="successCallback">Callback to execute when the object has been created with a new instance of DatabaseObject from which .Save() can be called for future modifications.</param>
        </member>
        <member name="M:PlayerIOClient.BigDB.CreateObject(System.String,System.String,PlayerIOClient.DatabaseObject,PlayerIOClient.Callback{PlayerIOClient.DatabaseObject},PlayerIOClient.Callback{PlayerIOClient.PlayerIOError})">
            <summary>Creates a new database object in the given table with the specified key. If no key is specified (null), the object will receive an autogenerated id.</summary>
             <param name="table">The name of the table to create the database object in</param>
             <param name="key">The key to assign to the database object</param>
             <param name="obj">The database object to create in the table</param>
             <param name="successCallback">Callback that will be called with a new instance of DatabaseObject from which .Save() can be called for future modifications when the object has been created.</param>
             <param name="errorCallback">Callback that will be called instead of successCallback if an error occurs during the object creation.</param>
        </member>
        <member name="M:PlayerIOClient.BigDB.LoadMyPlayerObject">
            <summary>Loads the database object corresponding to the player from the PlayerObjects table</summary>
            <returns>The database object corresponding to the player in the PlayerObjects table</returns>
        </member>
        <member name="M:PlayerIOClient.BigDB.LoadMyPlayerObject(PlayerIOClient.Callback{PlayerIOClient.DatabaseObject})">
            <summary>Loads the database object corresponding to the player from the PlayerObjects table</summary>
             <param name="successCallback">Callback with the loaded player object</param>
        </member>
        <member name="M:PlayerIOClient.BigDB.LoadMyPlayerObject(PlayerIOClient.Callback{PlayerIOClient.DatabaseObject},PlayerIOClient.Callback{PlayerIOClient.PlayerIOError})">
            <summary>Loads the database object corresponding to the player from the PlayerObjects table</summary>
             <param name="successCallback">Callback with the loaded player object</param>
             <param name="errorCallback">Callback that will be called instead of successCallback if an error occurs during the load.</param>
        </member>
        <member name="M:PlayerIOClient.BigDB.Load(System.String,System.String)">
            <summary>Load the database object with the given key from the given table.</summary>
            <param name="table">The table to load the database object from</param>
            <param name="key">The key of the database object to load</param>
            <returns>The database object found, or null if no object exists with the given key.</returns>
        </member>
        <member name="M:PlayerIOClient.BigDB.Load(System.String,System.String,PlayerIOClient.Callback{PlayerIOClient.DatabaseObject})">
            <summary>Load the database object with the given key from the given table.</summary>
            <param name="table">The table to load the database object from</param>
            <param name="key">The key of the database object to load</param>
            <param name="successCallback">Callback with the loaded database object</param>
        </member>
        <member name="M:PlayerIOClient.BigDB.Load(System.String,System.String,PlayerIOClient.Callback{PlayerIOClient.DatabaseObject},PlayerIOClient.Callback{PlayerIOClient.PlayerIOError})">
            <summary>Load the database object with the given key from the given table.</summary>
            <param name="table">The table to load the database object from</param>
            <param name="key">The key of the database object to load</param>
            <param name="successCallback">Callback with the loaded database object or null if no object exists with the given key</param>
            <param name="errorCallback">Callback that will be called instead of successCallback if an error occurs during the load.</param>
        </member>
        <member name="M:PlayerIOClient.BigDB.LoadOrCreate(System.String,System.String)">
            <summary>Loads or creates the database object with the given key from the given table.</summary>
            <param name="table">The table from which to load or create the database object</param>
            <param name="key">The key of the database object to load or create</param>
            <returns>The database object loaded</returns>
        </member>
        <member name="M:PlayerIOClient.BigDB.LoadOrCreate(System.String,System.String,PlayerIOClient.Callback{PlayerIOClient.DatabaseObject})">
            <summary>Loads or creates the database object with the given key from the given table.</summary>
            <param name="table">The table from which to load or create the database object</param>
            <param name="key">The key of the database object to load or create</param>
            <param name="successCallback">Callback with the database object</param>
        </member>
        <member name="M:PlayerIOClient.BigDB.LoadOrCreate(System.String,System.String,PlayerIOClient.Callback{PlayerIOClient.DatabaseObject},PlayerIOClient.Callback{PlayerIOClient.PlayerIOError})">
            <summary>Loads or creates the database object with the given key from the given table.</summary>
            <param name="table">The table from which to load or create the database object</param>
            <param name="key">The key of the database object to load or create</param>
            <param name="successCallback">Callback with the database object</param>
            <param name="errorCallback">Callback that will be called instead of successCallback if an error occurs during the load or create.</param>
        </member>
        <member name="M:PlayerIOClient.BigDB.LoadKeys(System.String,System.String[])">
            <summary>Loads the database objects with the given keys from the given table.</summary>
            <param name="table">The table to load the database objects from</param>
            <param name="keys">They keys of the database objects to load</param>
            <returns>An array of database objects in the same order as the keys array, with null values for non-existant database objects.</returns>
        </member>
        <member name="M:PlayerIOClient.BigDB.LoadKeys(System.String,System.String[],PlayerIOClient.Callback{PlayerIOClient.DatabaseObject[]})">
            <summary>Loads the database objects with the given keys from the given table.</summary>
            <param name="table">The table to load the database objects from</param>
            <param name="keys">They keys of the database objects to load</param>
            <param name="successCallback">Callback with an array of database objects in the same order as the keys array, with null values for non-existant database objects</param>
        </member>
        <member name="M:PlayerIOClient.BigDB.LoadKeys(System.String,System.String[],PlayerIOClient.Callback{PlayerIOClient.DatabaseObject[]},PlayerIOClient.Callback{PlayerIOClient.PlayerIOError})">
            <summary>Loads the database objects with the given keys from the given table.</summary>
            <param name="table">The table to load the database objects from</param>
            <param name="keys">They keys of the database objects to load</param>
            <param name="successCallback">Callback with an array of database objects in the same order as the keys array, with null values for non-existant database objects</param>
            <param name="errorCallback">Callback that will be called instead of successCallback if an error occurs during the load.</param>
        </member>
        <member name="M:PlayerIOClient.BigDB.LoadKeysOrCreate(System.String,System.String[])">
            <summary>Loads or creates database objects with the given keys from the given table. New objects are created if there are no existing objects for the given keys.</summary>
            <param name="table">The table to load the database objects from</param>
            <param name="keys">They keys of the database objects to load</param>
            <returns>An array of database objects in the same order as the keys array</returns>
        </member>
        <member name="M:PlayerIOClient.BigDB.LoadKeysOrCreate(System.String,System.String[],PlayerIOClient.Callback{PlayerIOClient.DatabaseObject[]})">
            <summary>Loads or creates database objects with the given keys from the given table. New objects are created if there are no existing objects for the given keys.</summary>
            <param name="table">The table to load the database objects from</param>
            <param name="keys">They keys of the database objects to load</param>
            <param name="successCallback">Callback with an array of database objects in the same order as the keys array</param>
        </member>
        <member name="M:PlayerIOClient.BigDB.LoadKeysOrCreate(System.String,System.String[],PlayerIOClient.Callback{PlayerIOClient.DatabaseObject[]},PlayerIOClient.Callback{PlayerIOClient.PlayerIOError})">
            <summary>Loads or creates database objects with the given keys from the given table. New objects are created if there are no existing objects for the given keys.</summary>
            <param name="table">The table to load the database objects from</param>
            <param name="keys">They keys of the database objects to load</param>
            <param name="successCallback">Callback with an array of database objects in the same order as the keys array</param>
            <param name="errorCallback">Callback that will be called instead of successCallback if an error occurs during the load or create.</param>
        </member>
        <member name="M:PlayerIOClient.BigDB.LoadSingle(System.String,System.String,System.Object[])">
            <summary>Load a database object from a table using the specified index.</summary>
            <param name="table">The table to load the database object from</param>
            <param name="index">The name of the index to query for the database object</param>
            <param name="indexValue">An array of objects of the same types as the index properties, specifying which object to load</param>
            <returns>The database object found, or null if no object was found.</returns>
        </member>
        <member name="M:PlayerIOClient.BigDB.LoadSingle(System.String,System.String,System.Object[],PlayerIOClient.Callback{PlayerIOClient.DatabaseObject})">
            <summary>Load a database object from a table using the specified index.</summary>
            <param name="table">The table to load the database object from</param>
            <param name="index">The name of the index to query for the database object</param>
            <param name="indexValue">An array of objects of the same types as the index properties, specifying which object to load</param>
            <param name="successCallback">Callback with the database object found, or null if no object was found</param>
        </member>
        <member name="M:PlayerIOClient.BigDB.LoadSingle(System.String,System.String,System.Object[],PlayerIOClient.Callback{PlayerIOClient.DatabaseObject},PlayerIOClient.Callback{PlayerIOClient.PlayerIOError})">
            <summary>Load a database object from a table using the specified index.</summary>
            <param name="table">The table to load the database object from</param>
            <param name="index">The name of the index to query for the database object</param>
            <param name="indexValue">An array of objects of the same types as the index properties, specifying which object to load</param>
            <param name="successCallback">Callback with the database object found, or null if no object was found</param>
            <param name="errorCallback">Callback that will be called instead of successCallback if an error occurs during the load.</param>
        </member>
        <member name="M:PlayerIOClient.BigDB.LoadRange(System.String,System.String,System.Object[],System.Object,System.Object,System.Int32)">
            <summary>Load a range of database objects from a table using the specified index.</summary>
            <param name="table">The table to load the database object from</param>
            <param name="index">The name of the index to query for the database object</param>
            <param name="indexPath">Where in the index to start the range search: An array of objects of the same types as the index properties, specifying where in the index to start loading database objects from. For instance, in the index [Mode,Map,Score] you might use new object[]{"expert","skyland"} as the indexPath and use the start and stop arguments to determine the range of scores you wish to return. IndexPath can be set to null if there is only one property in the index.</param>
            <param name="start">Where to start the range search. For instance, if the index is [Mode,Map,Score] and indexPath is ["expert","skyland"], then start defines the minimum score to include in the results</param>
            <param name="stop">Where to stop the range search. For instance, if the index is [Mode,Map,Score] and indexPath is ["expert","skyland"], then stop defines the maximum score to include in the results</param>
            <param name="limit">The max amount of objects to return</param>
            <returns>The database objects found.</returns>
        </member>
        <member name="M:PlayerIOClient.BigDB.LoadRange(System.String,System.String,System.Object[],System.Object,System.Object,System.Int32,PlayerIOClient.Callback{PlayerIOClient.DatabaseObject[]})">
            <summary>Load a range of database objects from a table using the specified index.</summary>
            <param name="table">The table to load the database object from</param>
            <param name="index">The name of the index to query for the database object</param>
            <param name="indexPath">Where in the index to start the range search: An array of objects of the same types as the index properties, specifying where in the index to start loading database objects from. For instance, in the index [Mode,Map,Score] you might use new object[]{"expert","skyland"} as the indexPath and use the start and stop arguments to determine the range of scores you wish to return. IndexPath can be set to null if there is only one property in the index.</param>
            <param name="start">Where to start the range search. For instance, if the index is [Mode,Map,Score] and indexPath is ["expert","skyland"], then start defines the minimum score to include in the results</param>
            <param name="stop">Where to stop the range search. For instance, if the index is [Mode,Map,Score] and indexPath is ["expert","skyland"], then stop defines the maximum score to include in the results</param>
            <param name="limit">The max amount of objects to return</param>
            <param name="successCallback">Callback with the database objects found.</param>
        </member>
        <member name="M:PlayerIOClient.BigDB.LoadRange(System.String,System.String,System.Object[],System.Object,System.Object,System.Int32,PlayerIOClient.Callback{PlayerIOClient.DatabaseObject[]},PlayerIOClient.Callback{PlayerIOClient.PlayerIOError})">
            <summary>Load a range of database objects from a table using the specified index.</summary>
            <param name="table">The table to load the database object from</param>
            <param name="index">The name of the index to query for the database object</param>
            <param name="indexPath">Where in the index to start the range search: An array of objects of the same types as the index properties, specifying where in the index to start loading database objects from. For instance, in the index [Mode,Map,Score] you might use new object[]{"expert","skyland"} as the indexPath and use the start and stop arguments to determine the range of scores you wish to return. IndexPath can be set to null if there is only one property in the index.</param>
            <param name="start">Where to start the range search. For instance, if the index is [Mode,Map,Score] and indexPath is ["expert","skyland"], then start defines the minimum score to include in the results</param>
            <param name="stop">Where to stop the range search. For instance, if the index is [Mode,Map,Score] and indexPath is ["expert","skyland"], then stop defines the maximum score to include in the results</param>
            <param name="limit">The max amount of objects to return</param>
            <param name="successCallback">Callback with the database objects found.</param>
            <param name="errorCallback">Callback that will be called instead of successCallback if an error occurs during the load.</param>
        </member>
        <member name="M:PlayerIOClient.BigDB.SaveChanges(System.Boolean,System.Boolean,PlayerIOClient.DatabaseObject[])">
            <summary>Save changes to one or more database objects in one go.</summary>
            <param name="useOptimisticLocks">Should the save only go through, if no other process has modified the object since it was loaded?</param>
            <param name="fullOverwrite">Overwrite the stored object with the data from this object instead of only sending in the changed properties</param>
            <param name="objects">The objects with changes to save</param>
            <returns>True if the save succeded, false if not (only if using optimistic locking and newer version exists in database).</returns>
        </member>
        <member name="M:PlayerIOClient.BigDB.SaveChanges(System.Boolean,System.Boolean,PlayerIOClient.DatabaseObject[],PlayerIOClient.Callback)">
            <summary>Save changes to one or more database objects in one go.</summary>
            <param name="useOptimisticLocks">Should the save only go through, if no other process has modified the object since it was loaded?</param>
            <param name="fullOverwrite">Overwrite the stored object with the data from this object instead of only sending in the changed properties</param>
            <param name="objects">The objects with changes to save</param>
            <param name="successCallback">Callback with true if the save succeded and false if it failed (only if using optimistic locking and newer version exists in database)</param>
        </member>
        <member name="M:PlayerIOClient.BigDB.SaveChanges(System.Boolean,System.Boolean,PlayerIOClient.DatabaseObject[],PlayerIOClient.Callback,PlayerIOClient.Callback{PlayerIOClient.PlayerIOError})">
            <summary>Save changes to one or more database objects in one go.</summary>
            <param name="useOptimisticLocks">Should the save only go through, if no other process has modified the object since it was loaded?</param>
            <param name="fullOverwrite">Overwrite the stored object with the data from this object instead of only sending in the changed properties</param>
            <param name="objects">The objects with changes to save</param>
            <param name="successCallback">Callback with true if the save succeded and false if it failed (only if using optimistic locking and newer version exists in database)</param>
            <param name="errorCallback">Callback that will be called instead of successCallback if an error occurs during the save.</param>
        </member>
        <member name="M:PlayerIOClient.BigDB.DeleteKeys(System.String,System.String[])">
            <summary>Delete a set of database objects from a table</summary>
            <param name="table">The table to delete the database objects from</param>
            <param name="keys">The keys of the database objects to delete</param>
        </member>
        <member name="M:PlayerIOClient.BigDB.DeleteKeys(System.String,System.String[],PlayerIOClient.Callback)">
            <summary>Delete a set of database objects from a table</summary>
            <param name="table">The table to delete the database objects from</param>
            <param name="keys">The keys of the database objects to delete</param>
            <param name="successCallback">Callback when the deletion has completed.</param>
        </member>
        <member name="M:PlayerIOClient.BigDB.DeleteKeys(System.String,System.String[],PlayerIOClient.Callback,PlayerIOClient.Callback{PlayerIOClient.PlayerIOError})">
            <summary>Delete a set of database objects from a table</summary>
            <param name="table">The table to delete the database objects from</param>
            <param name="keys">The keys of the database objects to delete</param>
            <param name="successCallback">Callback when the deletion has completed.</param>
            <param name="errorCallback">Callback that will be called instead of successCallback if an error occurs during the deletion.</param>
        </member>
        <member name="M:PlayerIOClient.BigDB.DeleteRange(System.String,System.String,System.Object[],System.Object,System.Object)">
            <summary>Delete a range of database objects from a table using an index</summary>
            <param name="table">The table to delete the database object from</param>
            <param name="index">The name of the index to query for the database objects to delete</param>
            <param name="indexPath">Where in the index to start the range delete: An array of objects of the same types as the index properties, specifying where in the index to start loading database objects from. For instance, in the index [Mode,Map,Score] you might use new object[]{"expert","skyland"} as the indexPath and use the start and stop arguments to determine the range of scores you wish to delete. IndexPath can be set to null instead of an empty array.</param>
            <param name="start">Where to start the range delete. For instance, if the index is [Mode,Map,Score] and indexPath is ["expert","skyland"], then start defines the minimum score to delete</param>
            <param name="stop">Where to stop the range delete. For instance, if the index is [Mode,Map,Score] and indexPath is ["expert","skyland"], then stop defines the maximum score to delete</param>
        </member>
        <member name="M:PlayerIOClient.BigDB.DeleteRange(System.String,System.String,System.Object[],System.Object,System.Object,PlayerIOClient.Callback)">
            <summary>Delete a range of database objects from a table using an index</summary>
            <param name="table">The table to delete the database object from</param>
            <param name="index">The name of the index to query for the database objects to delete</param>
            <param name="indexPath">Where in the index to start the range delete: An array of objects of the same types as the index properties, specifying where in the index to start loading database objects from. For instance, in the index [Mode,Map,Score] you might use new object[]{"expert","skyland"} as the indexPath and use the start and stop arguments to determine the range of scores you wish to delete. IndexPath can be set to null instead of an empty array.</param>
            <param name="start">Where to start the range delete. For instance, if the index is [Mode,Map,Score] and indexPath is ["expert","skyland"], then start defines the minimum score to delete</param>
            <param name="stop">Where to stop the range delete. For instance, if the index is [Mode,Map,Score] and indexPath is ["expert","skyland"], then stop defines the maximum score to delete</param>
            <param name="successCallback">Callback when the deletion has completed.</param>
        </member>
        <member name="M:PlayerIOClient.BigDB.DeleteRange(System.String,System.String,System.Object[],System.Object,System.Object,PlayerIOClient.Callback,PlayerIOClient.Callback{PlayerIOClient.PlayerIOError})">
            <summary>Delete a range of database objects from a table using an index</summary>
            <param name="table">The table to delete the database object from</param>
            <param name="index">The name of the index to query for the database objects to delete</param>
            <param name="indexPath">Where in the index to start the range delete: An array of objects of the same types as the index properties, specifying where in the index to start loading database objects from. For instance, in the index [Mode,Map,Score] you might use new object[]{"expert","skyland"} as the indexPath and use the start and stop arguments to determine the range of scores you wish to delete. IndexPath can be set to null instead of an empty array.</param>
            <param name="start">Where to start the range delete. For instance, if the index is [Mode,Map,Score] and indexPath is ["expert","skyland"], then start defines the minimum score to delete</param>
            <param name="stop">Where to stop the range delete. For instance, if the index is [Mode,Map,Score] and indexPath is ["expert","skyland"], then stop defines the maximum score to delete</param>
            <param name="successCallback">Callback when the deletion has completed.</param>
            <param name="errorCallback">Callback that will be called instead of successCallback if an error occurs during the deletion.</param>
        </member>
        <member name="M:PlayerIOClient.Internal.PlayerIOChannel.Connect(System.String,System.String,System.String,System.String,System.String)">
            <summary>Returns a token that can be used to work with PlayerIO methods in the future</summary>
            <param name="gameId">The game id of the game you wish to connect to. This value can be found in the admin panel</param>
            <param name="connectionId">The id of the connection, as given in the settings section of the admin panel. 'public' should be used as the default</param>
            <param name="userId">The id of the user connecting. This can be any string you like.</param>
            <param name="auth">If the connection identified by ConnectionIdentifier only accepts authenticated requests, the auth value generated based on UserId is added here</param>
            <param name="partnerId">The partner id of the user connecting, if any.</param>
        </member>
        <member name="M:PlayerIOClient.Internal.PlayerIOChannel.Connect(System.String,System.String,System.String,System.String,System.String,PlayerIOClient.Callback{PlayerIOClient.Internal.PlayerIOChannel.ConnectOutput},PlayerIOClient.Callback{PlayerIOClient.PlayerIOError})">
            <summary>Returns a token that can be used to work with PlayerIO methods in the future</summary>
            <param name="gameId">The game id of the game you wish to connect to. This value can be found in the admin panel</param>
            <param name="connectionId">The id of the connection, as given in the settings section of the admin panel. 'public' should be used as the default</param>
            <param name="userId">The id of the user connecting. This can be any string you like.</param>
            <param name="auth">If the connection identified by ConnectionIdentifier only accepts authenticated requests, the auth value generated based on UserId is added here</param>
            <param name="partnerId">The partner id of the user connecting, if any.</param>
            <param name="onSuccess">Callback method to be executed when request completes successfully</param>
            <param name="onError">Callback method to be executed if request fails</param>
        </member>
        <member name="M:PlayerIOClient.Internal.PlayerIOChannel.SimpleConnect(System.String,System.String,System.String)">
            <summary>Authenticates a user in the simple user db and returns a connection token.</summary>
            <param name="gameId">The game id of the game you wish to connect to. This value can be found in the admin panel</param>
            <param name="usernameOrEmail">The username or email of the user you wish to authenticate.</param>
            <param name="password">The password of the user you wish to authenticate.</param>
        </member>
        <member name="M:PlayerIOClient.Internal.PlayerIOChannel.SimpleConnect(System.String,System.String,System.String,PlayerIOClient.Callback{PlayerIOClient.Internal.PlayerIOChannel.SimpleConnectOutput},PlayerIOClient.Callback{PlayerIOClient.PlayerIOError})">
            <summary>Authenticates a user in the simple user db and returns a connection token.</summary>
            <param name="gameId">The game id of the game you wish to connect to. This value can be found in the admin panel</param>
            <param name="usernameOrEmail">The username or email of the user you wish to authenticate.</param>
            <param name="password">The password of the user you wish to authenticate.</param>
            <param name="onSuccess">Callback method to be executed when request completes successfully</param>
            <param name="onError">Callback method to be executed if request fails</param>
        </member>
        <member name="M:PlayerIOClient.Internal.PlayerIOChannel.SimpleGetCaptcha(System.String,System.Int32,System.Int32)">
            <summary>Creates a Captcha image and key, to be used for registrations where the added security of Captcha is required..</summary>
            <param name="gameId">The game id of the game you wish to connect to. This value can be found in the admin panel.</param>
            <param name="width">The width of the Captcha image.</param>
            <param name="height">The height of the Captcha image.</param>
        </member>
        <member name="M:PlayerIOClient.Internal.PlayerIOChannel.SimpleGetCaptcha(System.String,System.Int32,System.Int32,PlayerIOClient.Callback{PlayerIOClient.Internal.PlayerIOChannel.SimpleGetCaptchaOutput},PlayerIOClient.Callback{PlayerIOClient.PlayerIOError})">
            <summary>Creates a Captcha image and key, to be used for registrations where the added security of Captcha is required..</summary>
            <param name="gameId">The game id of the game you wish to connect to. This value can be found in the admin panel.</param>
            <param name="width">The width of the Captcha image.</param>
            <param name="height">The height of the Captcha image.</param>
            <param name="onSuccess">Callback method to be executed when request completes successfully</param>
            <param name="onError">Callback method to be executed if request fails</param>
        </member>
        <member name="M:PlayerIOClient.Internal.PlayerIOChannel.SimpleRegister(System.String,System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>Registers a new user in the simple user db and returns a connection token.</summary>
            <param name="gameId">The game id of the game you wish to connect to. This value can be found in the admin panel.</param>
            <param name="username">The username of the new user.</param>
            <param name="password">The password of the new user.</param>
            <param name="email">The email of the new user. (optional)</param>
            <param name="captchaKey">(only if captcha is required) The key of the Captcha image used to get the user to write in the Captcha value</param>
            <param name="captchaValue">(only if captcha is required) The string the user entered in response to the captcha image</param>
            <param name="extraData">Any extra data that you wish to store with the user such as gender, birthdate, etc. (optional)</param>
            <param name="partnerId">The partner id of the user connecting, if any.</param>
        </member>
        <member name="M:PlayerIOClient.Internal.PlayerIOChannel.SimpleRegister(System.String,System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String,PlayerIOClient.Callback{PlayerIOClient.Internal.PlayerIOChannel.SimpleRegisterOutput},PlayerIOClient.Callback{PlayerIOClient.PlayerIORegistrationError})">
            <summary>Registers a new user in the simple user db and returns a connection token.</summary>
            <param name="gameId">The game id of the game you wish to connect to. This value can be found in the admin panel.</param>
            <param name="username">The username of the new user.</param>
            <param name="password">The password of the new user.</param>
            <param name="email">The email of the new user. (optional)</param>
            <param name="captchaKey">(only if captcha is required) The key of the Captcha image used to get the user to write in the Captcha value</param>
            <param name="captchaValue">(only if captcha is required) The string the user entered in response to the captcha image</param>
            <param name="extraData">Any extra data that you wish to store with the user such as gender, birthdate, etc. (optional)</param>
            <param name="partnerId">The partner id of the user connecting, if any.</param>
            <param name="onSuccess">Callback method to be executed when request completes successfully</param>
            <param name="onError">Callback method to be executed if request fails</param>
        </member>
        <member name="M:PlayerIOClient.Internal.PlayerIOChannel.SimpleRecoverPassword(System.String,System.String)">
            <summary>Initiates the password recovery process for a user. The user must have supplied an email address during registration.</summary>
            <param name="gameId">The game id of the game the user is registered in.</param>
            <param name="usernameOrEmail">The username or email address of the user that wishes to recover his password.</param>
        </member>
        <member name="M:PlayerIOClient.Internal.PlayerIOChannel.SimpleRecoverPassword(System.String,System.String,PlayerIOClient.Callback,PlayerIOClient.Callback{PlayerIOClient.PlayerIOError})">
            <summary>Initiates the password recovery process for a user. The user must have supplied an email address during registration.</summary>
            <param name="gameId">The game id of the game the user is registered in.</param>
            <param name="usernameOrEmail">The username or email address of the user that wishes to recover his password.</param>
            <param name="onSuccess">Callback method to be executed when request completes successfully</param>
            <param name="onError">Callback method to be executed if request fails</param>
        </member>
        <member name="M:PlayerIOClient.Internal.PlayerIOChannel.KongregateConnect(System.String,System.String,System.String)">
            <summary>Authenticates a Kongregate user and returns a connection token.</summary>
            <param name="gameId">The game id of the game you wish to connect to. This value can be found in the admin panel</param>
            <param name="userId">The Kongregate user id of the user you wish to authenticate.</param>
            <param name="gameAuthToken">The Kongregate game auth token of the user's session.</param>
        </member>
        <member name="M:PlayerIOClient.Internal.PlayerIOChannel.KongregateConnect(System.String,System.String,System.String,PlayerIOClient.Callback{PlayerIOClient.Internal.PlayerIOChannel.KongregateConnectOutput},PlayerIOClient.Callback{PlayerIOClient.PlayerIOError})">
            <summary>Authenticates a Kongregate user and returns a connection token.</summary>
            <param name="gameId">The game id of the game you wish to connect to. This value can be found in the admin panel</param>
            <param name="userId">The Kongregate user id of the user you wish to authenticate.</param>
            <param name="gameAuthToken">The Kongregate game auth token of the user's session.</param>
            <param name="onSuccess">Callback method to be executed when request completes successfully</param>
            <param name="onError">Callback method to be executed if request fails</param>
        </member>
        <member name="M:PlayerIOClient.Internal.PlayerIOChannel.FacebookOAuthConnect(System.String,System.String,System.String)">
            <summary>Authenticates a Facebook access_token.</summary>
            <param name="gameId">The game id of the game you wish to connect to. This value can be found in the admin panel</param>
            <param name="accessToken">The Facebook access_token you wish to authenticate with.</param>
            <param name="partnerId">The partner id of the user connecting, if any.</param>
        </member>
        <member name="M:PlayerIOClient.Internal.PlayerIOChannel.FacebookOAuthConnect(System.String,System.String,System.String,PlayerIOClient.Callback{PlayerIOClient.Internal.PlayerIOChannel.FacebookOAuthConnectOutput},PlayerIOClient.Callback{PlayerIOClient.PlayerIOError})">
            <summary>Authenticates a Facebook access_token.</summary>
            <param name="gameId">The game id of the game you wish to connect to. This value can be found in the admin panel</param>
            <param name="accessToken">The Facebook access_token you wish to authenticate with.</param>
            <param name="partnerId">The partner id of the user connecting, if any.</param>
            <param name="onSuccess">Callback method to be executed when request completes successfully</param>
            <param name="onError">Callback method to be executed if request fails</param>
        </member>
        <member name="M:PlayerIOClient.Internal.PlayerIOChannel.SteamConnect(System.String,System.String,System.String)">
            <summary>Authenticates a Steam session.</summary>
            <param name="gameId">The game id of the game you wish to connect to. This value can be found in the admin panel</param>
            <param name="steamAppId">The Steam App Id of the game.</param>
            <param name="steamSessionTicket">The Steam Session Ticket for the user.</param>
        </member>
        <member name="M:PlayerIOClient.Internal.PlayerIOChannel.SteamConnect(System.String,System.String,System.String,PlayerIOClient.Callback{PlayerIOClient.Internal.PlayerIOChannel.SteamConnectOutput},PlayerIOClient.Callback{PlayerIOClient.PlayerIOError})">
            <summary>Authenticates a Steam session.</summary>
            <param name="gameId">The game id of the game you wish to connect to. This value can be found in the admin panel</param>
            <param name="steamAppId">The Steam App Id of the game.</param>
            <param name="steamSessionTicket">The Steam Session Ticket for the user.</param>
            <param name="onSuccess">Callback method to be executed when request completes successfully</param>
            <param name="onError">Callback method to be executed if request fails</param>
        </member>
        <member name="M:PlayerIOClient.Internal.PlayerIOChannel.CreateRoom(System.String,System.String,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean)">
            <summary>Create an multiplayer room on the Player.IO infrastructure</summary>
            <param name="roomId">The id you wish to assign to your new room - You can use this to connect to the specific room later as long as it still exists</param>
            <param name="roomType">The name of the room type you wish to run the room as. This value should match one of the [RoomType(...)] attributes of your uploaded code. A room type of 'bounce' is always available.</param>
            <param name="visible">Should the room be visible when listing rooms with GetRooms</param>
            <param name="roomData">The data to initialize the room with, this can be read with ListRooms and changed from the serverside</param>
            <param name="isDevRoom">Should the room be created in the global roomlist, or in the roomlist for the development server?</param>
        </member>
        <member name="M:PlayerIOClient.Internal.PlayerIOChannel.CreateRoom(System.String,System.String,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean,PlayerIOClient.Callback{System.String},PlayerIOClient.Callback{PlayerIOClient.PlayerIOError})">
            <summary>Create an multiplayer room on the Player.IO infrastructure</summary>
            <param name="roomId">The id you wish to assign to your new room - You can use this to connect to the specific room later as long as it still exists</param>
            <param name="roomType">The name of the room type you wish to run the room as. This value should match one of the [RoomType(...)] attributes of your uploaded code. A room type of 'bounce' is always available.</param>
            <param name="visible">Should the room be visible when listing rooms with GetRooms</param>
            <param name="roomData">The data to initialize the room with, this can be read with ListRooms and changed from the serverside</param>
            <param name="isDevRoom">Should the room be created in the global roomlist, or in the roomlist for the development server?</param>
            <param name="onSuccess">Callback method to be executed when request completes successfully</param>
            <param name="onError">Callback method to be executed if request fails</param>
        </member>
        <member name="M:PlayerIOClient.Internal.PlayerIOChannel.JoinRoom(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean)">
            <summary>Join a running multiplayer room</summary>
            <param name="roomId">The id of the room you wish to connect to</param>
            <param name="joinData">Data to send to the room with additional information about the join </param>
            <param name="isDevRoom">Set to true to look for the room in the development roomlist and not in the games global roomlist.</param>
        </member>
        <member name="M:PlayerIOClient.Internal.PlayerIOChannel.JoinRoom(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean,PlayerIOClient.Callback{PlayerIOClient.Internal.PlayerIOChannel.JoinRoomOutput},PlayerIOClient.Callback{PlayerIOClient.PlayerIOError})">
            <summary>Join a running multiplayer room</summary>
            <param name="roomId">The id of the room you wish to connect to</param>
            <param name="joinData">Data to send to the room with additional information about the join </param>
            <param name="isDevRoom">Set to true to look for the room in the development roomlist and not in the games global roomlist.</param>
            <param name="onSuccess">Callback method to be executed when request completes successfully</param>
            <param name="onError">Callback method to be executed if request fails</param>
        </member>
        <member name="M:PlayerIOClient.Internal.PlayerIOChannel.ListRooms(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Int32,System.Int32,System.Boolean)">
            <summary>List the currently running multiplayer rooms</summary>
            <param name="roomType">The type of room you wish to list</param>
            <param name="searchCriteria">Only rooms with the same values in their roomdata will be returned</param>
            <param name="resultLimit">The maximum amount of rooms you want to receive. Use 0 for 'as many as possible'.</param>
            <param name="resultOffset">The offset into the list you wish</param>
            <param name="onlyDevRooms">Set to true to list rooms in the development roomlist, rather than from the games global roomlist.</param>
        </member>
        <member name="M:PlayerIOClient.Internal.PlayerIOChannel.ListRooms(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Int32,System.Int32,System.Boolean,PlayerIOClient.Callback{PlayerIOClient.RoomInfo[]},PlayerIOClient.Callback{PlayerIOClient.PlayerIOError})">
            <summary>List the currently running multiplayer rooms</summary>
            <param name="roomType">The type of room you wish to list</param>
            <param name="searchCriteria">Only rooms with the same values in their roomdata will be returned</param>
            <param name="resultLimit">The maximum amount of rooms you want to receive. Use 0 for 'as many as possible'.</param>
            <param name="resultOffset">The offset into the list you wish</param>
            <param name="onlyDevRooms">Set to true to list rooms in the development roomlist, rather than from the games global roomlist.</param>
            <param name="onSuccess">Callback method to be executed when request completes successfully</param>
            <param name="onError">Callback method to be executed if request fails</param>
        </member>
        <member name="M:PlayerIOClient.Internal.PlayerIOChannel.CreateJoinRoom(System.String,System.String,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean)">
            <summary>Creates a multiplayer room (if it does not exist already) and joins it.</summary>
            <param name="roomId">The id of the room you wish to create/join</param>
            <param name="roomType">If the room doesn't exist: The name of the room type you wish to run the room as. This value should match one of the [RoomType(...)] attributes of your uploaded code. A room type of 'bounce' is always available.</param>
            <param name="visible">If the room doesn't exist: Should the room be visible when listing rooms with GetRooms upon creation</param>
            <param name="roomData">If the room doesn't exist: The data to initialize the room with upon creation</param>
            <param name="joinData">Data to send to the room with additional information about the join </param>
            <param name="isDevRoom">Is the room being created/joined running on a development server?</param>
        </member>
        <member name="M:PlayerIOClient.Internal.PlayerIOChannel.CreateJoinRoom(System.String,System.String,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean,PlayerIOClient.Callback{PlayerIOClient.Internal.PlayerIOChannel.CreateJoinRoomOutput},PlayerIOClient.Callback{PlayerIOClient.PlayerIOError})">
            <summary>Creates a multiplayer room (if it does not exist already) and joins it.</summary>
            <param name="roomId">The id of the room you wish to create/join</param>
            <param name="roomType">If the room doesn't exist: The name of the room type you wish to run the room as. This value should match one of the [RoomType(...)] attributes of your uploaded code. A room type of 'bounce' is always available.</param>
            <param name="visible">If the room doesn't exist: Should the room be visible when listing rooms with GetRooms upon creation</param>
            <param name="roomData">If the room doesn't exist: The data to initialize the room with upon creation</param>
            <param name="joinData">Data to send to the room with additional information about the join </param>
            <param name="isDevRoom">Is the room being created/joined running on a development server?</param>
            <param name="onSuccess">Callback method to be executed when request completes successfully</param>
            <param name="onError">Callback method to be executed if request fails</param>
        </member>
        <member name="M:PlayerIOClient.Internal.PlayerIOChannel.UpdateRoom(System.String,System.Int32,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>A game server wants to update a room</summary>
            <param name="extendedRoomId"></param>
            <param name="visible">0=Hidden, 1=Visible, 2=NoChange</param>
            <param name="roomData">Changed room data for the room (if null, nothing changes)</param>
        </member>
        <member name="M:PlayerIOClient.Internal.PlayerIOChannel.UpdateRoom(System.String,System.Int32,System.Collections.Generic.Dictionary{System.String,System.String},PlayerIOClient.Callback,PlayerIOClient.Callback{PlayerIOClient.PlayerIOError})">
            <summary>A game server wants to update a room</summary>
            <param name="extendedRoomId"></param>
            <param name="visible">0=Hidden, 1=Visible, 2=NoChange</param>
            <param name="roomData">Changed room data for the room (if null, nothing changes)</param>
            <param name="onSuccess">Callback method to be executed when request completes successfully</param>
            <param name="onError">Callback method to be executed if request fails</param>
        </member>
        <member name="M:PlayerIOClient.Internal.PlayerIOChannel.UserLeftRoom(System.String,System.Int32,System.Boolean)">
            <summary>A game server is reporting that a user left a game</summary>
            <param name="extendedRoomId"></param>
            <param name="newPlayerCount"></param>
            <param name="closed"></param>
        </member>
        <member name="M:PlayerIOClient.Internal.PlayerIOChannel.UserLeftRoom(System.String,System.Int32,System.Boolean,PlayerIOClient.Callback,PlayerIOClient.Callback{PlayerIOClient.PlayerIOError})">
            <summary>A game server is reporting that a user left a game</summary>
            <param name="extendedRoomId"></param>
            <param name="newPlayerCount"></param>
            <param name="closed"></param>
            <param name="onSuccess">Callback method to be executed when request completes successfully</param>
            <param name="onError">Callback method to be executed if request fails</param>
        </member>
        <member name="M:PlayerIOClient.Internal.PlayerIOChannel.JoinCluster(System.String,System.Boolean,System.Collections.Generic.List{System.Int32},System.String,System.String,System.String,System.String,System.String,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>A new server has booted and wants to join the cluster</summary>
            <param name="clusterAccessKey">The accesskey to for the cluster to join</param>
            <param name="isDevelopmentServer">Is it a development server</param>
            <param name="ports">the ports which the joining server is listening on</param>
            <param name="machineName">The name of the machine running the server</param>
            <param name="version">The version of the production server running on the machine</param>
            <param name="machineId">The unique id of this server</param>
            <param name="os">The operating system of this server</param>
            <param name="cpu">CPU Information of this server</param>
            <param name="cpuCores">How many cores does this server have</param>
            <param name="cpuLogicalCores">How many logical cores does this server have</param>
            <param name="cpuAddressWidth">What is the addresswidth of the server</param>
            <param name="cpuMaxClockSpeed">What is the max clock speed of the server</param>
            <param name="ramMegabytes">How much ram does this server have</param>
            <param name="ramSpeed">How fast is the ram of this server</param>
        </member>
        <member name="M:PlayerIOClient.Internal.PlayerIOChannel.JoinCluster(System.String,System.Boolean,System.Collections.Generic.List{System.Int32},System.String,System.String,System.String,System.String,System.String,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,PlayerIOClient.Callback{PlayerIOClient.Internal.PlayerIOChannel.JoinClusterOutput},PlayerIOClient.Callback{PlayerIOClient.PlayerIOError})">
            <summary>A new server has booted and wants to join the cluster</summary>
            <param name="clusterAccessKey">The accesskey to for the cluster to join</param>
            <param name="isDevelopmentServer">Is it a development server</param>
            <param name="ports">the ports which the joining server is listening on</param>
            <param name="machineName">The name of the machine running the server</param>
            <param name="version">The version of the production server running on the machine</param>
            <param name="machineId">The unique id of this server</param>
            <param name="os">The operating system of this server</param>
            <param name="cpu">CPU Information of this server</param>
            <param name="cpuCores">How many cores does this server have</param>
            <param name="cpuLogicalCores">How many logical cores does this server have</param>
            <param name="cpuAddressWidth">What is the addresswidth of the server</param>
            <param name="cpuMaxClockSpeed">What is the max clock speed of the server</param>
            <param name="ramMegabytes">How much ram does this server have</param>
            <param name="ramSpeed">How fast is the ram of this server</param>
            <param name="onSuccess">Callback method to be executed when request completes successfully</param>
            <param name="onError">Callback method to be executed if request fails</param>
        </member>
        <member name="M:PlayerIOClient.Internal.PlayerIOChannel.ServerHeartbeat(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Collections.Generic.List{PlayerIOClient.Internal.PlayerIOChannel.RunningRoom},System.Collections.Generic.List{PlayerIOClient.Internal.PlayerIOChannel.GameResourceUsage})">
            <summary>Hey PlayerIO; I'm still alive, don't delete my rooms!</summary>
            <param name="clusterAccessKey">The accesskey for the cluster of the server</param>
            <param name="serverId"></param>
            <param name="appDomains"></param>
            <param name="serverTypes"></param>
            <param name="machineCPU"></param>
            <param name="processCPU"></param>
            <param name="memoryUsage"></param>
            <param name="avaliableMemory"></param>
            <param name="freeMemory"></param>
            <param name="runningRooms"></param>
            <param name="usedResources"></param>
        </member>
        <member name="M:PlayerIOClient.Internal.PlayerIOChannel.ServerHeartbeat(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Collections.Generic.List{PlayerIOClient.Internal.PlayerIOChannel.RunningRoom},System.Collections.Generic.List{PlayerIOClient.Internal.PlayerIOChannel.GameResourceUsage},PlayerIOClient.Callback{System.String},PlayerIOClient.Callback{PlayerIOClient.PlayerIOError})">
            <summary>Hey PlayerIO; I'm still alive, don't delete my rooms!</summary>
            <param name="clusterAccessKey">The accesskey for the cluster of the server</param>
            <param name="serverId"></param>
            <param name="appDomains"></param>
            <param name="serverTypes"></param>
            <param name="machineCPU"></param>
            <param name="processCPU"></param>
            <param name="memoryUsage"></param>
            <param name="avaliableMemory"></param>
            <param name="freeMemory"></param>
            <param name="runningRooms"></param>
            <param name="usedResources"></param>
            <param name="onSuccess">Callback method to be executed when request completes successfully</param>
            <param name="onError">Callback method to be executed if request fails</param>
        </member>
        <member name="M:PlayerIOClient.Internal.PlayerIOChannel.GetGameAssemblyUrl(System.String,System.String)">
            <summary>Gets the location where the code for a server type can be downloaded.</summary>
            <param name="clusterAccessKey">The accesskey for the cluster of the server</param>
            <param name="gameCodeId"></param>
        </member>
        <member name="M:PlayerIOClient.Internal.PlayerIOChannel.GetGameAssemblyUrl(System.String,System.String,PlayerIOClient.Callback{System.Collections.Generic.List{System.String}},PlayerIOClient.Callback{PlayerIOClient.PlayerIOError})">
            <summary>Gets the location where the code for a server type can be downloaded.</summary>
            <param name="clusterAccessKey">The accesskey for the cluster of the server</param>
            <param name="gameCodeId"></param>
            <param name="onSuccess">Callback method to be executed when request completes successfully</param>
            <param name="onError">Callback method to be executed if request fails</param>
        </member>
        <member name="M:PlayerIOClient.Internal.PlayerIOChannel.DevServerLogin(System.String,System.String)">
            <summary>Login to get a ClusterAccessKey for development server</summary>
            <param name="username"></param>
            <param name="password"></param>
        </member>
        <member name="M:PlayerIOClient.Internal.PlayerIOChannel.DevServerLogin(System.String,System.String,PlayerIOClient.Callback{PlayerIOClient.Internal.PlayerIOChannel.DevServerLoginOutput},PlayerIOClient.Callback{PlayerIOClient.PlayerIOError})">
            <summary>Login to get a ClusterAccessKey for development server</summary>
            <param name="username"></param>
            <param name="password"></param>
            <param name="onSuccess">Callback method to be executed when request completes successfully</param>
            <param name="onError">Callback method to be executed if request fails</param>
        </member>
        <member name="M:PlayerIOClient.Internal.PlayerIOChannel.WriteError(System.String,System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>Writes an entry to the error log</summary>
            <param name="source">Where did the error come from? For instance, if you're writing the error from a flash file, the source might be 'flash' while errors from multiplayer code could be saved under 'multiplayer code'</param>
            <param name="error">A short string describing the error without details. Example 'Object not set to instance of an object'</param>
            <param name="details">The message describing the error in detail. Example 'couldn't find the user 'bob' in the current game'</param>
            <param name="stacktrace">The stacktrace (if available) of the error</param>
            <param name="extraData">Any extra data you'd like to associate with the error log entry</param>
        </member>
        <member name="M:PlayerIOClient.Internal.PlayerIOChannel.WriteError(System.String,System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},PlayerIOClient.Callback,PlayerIOClient.Callback{PlayerIOClient.PlayerIOError})">
            <summary>Writes an entry to the error log</summary>
            <param name="source">Where did the error come from? For instance, if you're writing the error from a flash file, the source might be 'flash' while errors from multiplayer code could be saved under 'multiplayer code'</param>
            <param name="error">A short string describing the error without details. Example 'Object not set to instance of an object'</param>
            <param name="details">The message describing the error in detail. Example 'couldn't find the user 'bob' in the current game'</param>
            <param name="stacktrace">The stacktrace (if available) of the error</param>
            <param name="extraData">Any extra data you'd like to associate with the error log entry</param>
            <param name="onSuccess">Callback method to be executed when request completes successfully</param>
            <param name="onError">Callback method to be executed if request fails</param>
        </member>
        <member name="M:PlayerIOClient.Internal.PlayerIOChannel.CreateObjects(System.Collections.Generic.List{PlayerIOClient.Internal.PlayerIOChannel.NewBigDBObject},System.Boolean)">
            <summary>Creates a new database object in the given table with the specified key. If no key is specified (null), the object will receive an autogenerated id.</summary>
            <param name="objects">The objects to create</param>
            <param name="loadExisting">Load existing objects if they already exists, instead of throwing an error</param>
        </member>
        <member name="M:PlayerIOClient.Internal.PlayerIOChannel.CreateObjects(System.Collections.Generic.List{PlayerIOClient.Internal.PlayerIOChannel.NewBigDBObject},System.Boolean,PlayerIOClient.Callback{System.Collections.Generic.List{PlayerIOClient.Internal.PlayerIOChannel.BigDBObject}},PlayerIOClient.Callback{PlayerIOClient.PlayerIOError})">
            <summary>Creates a new database object in the given table with the specified key. If no key is specified (null), the object will receive an autogenerated id.</summary>
            <param name="objects">The objects to create</param>
            <param name="loadExisting">Load existing objects if they already exists, instead of throwing an error</param>
            <param name="onSuccess">Callback method to be executed when request completes successfully</param>
            <param name="onError">Callback method to be executed if request fails</param>
        </member>
        <member name="M:PlayerIOClient.Internal.PlayerIOChannel.LoadObjects(System.Collections.Generic.List{PlayerIOClient.Internal.PlayerIOChannel.BigDBObjectId})">
            <summary>Load database objects</summary>
            <param name="objectIds">Identifiers for the objects to load</param>
        </member>
        <member name="M:PlayerIOClient.Internal.PlayerIOChannel.LoadObjects(System.Collections.Generic.List{PlayerIOClient.Internal.PlayerIOChannel.BigDBObjectId},PlayerIOClient.Callback{System.Collections.Generic.List{PlayerIOClient.Internal.PlayerIOChannel.BigDBObject}},PlayerIOClient.Callback{PlayerIOClient.PlayerIOError})">
            <summary>Load database objects</summary>
            <param name="objectIds">Identifiers for the objects to load</param>
            <param name="onSuccess">Callback method to be executed when request completes successfully</param>
            <param name="onError">Callback method to be executed if request fails</param>
        </member>
        <member name="M:PlayerIOClient.Internal.PlayerIOChannel.SaveObjectChanges(PlayerIOClient.Internal.PlayerIOChannel.LockType,System.Collections.Generic.List{PlayerIOClient.Internal.PlayerIOChannel.BigDBChangeset},System.Boolean)">
            <summary>Saves changes to database objects that already exists in BigDB.</summary>
            <param name="lockType">Which kind of lock to use when performing the save</param>
            <param name="changesets">The list of changes to apply to the database</param>
            <param name="createIfMissing">Create objects based on the changesets if there are no existings objects to modify</param>
        </member>
        <member name="M:PlayerIOClient.Internal.PlayerIOChannel.SaveObjectChanges(PlayerIOClient.Internal.PlayerIOChannel.LockType,System.Collections.Generic.List{PlayerIOClient.Internal.PlayerIOChannel.BigDBChangeset},System.Boolean,PlayerIOClient.Callback{System.Collections.Generic.List{System.String}},PlayerIOClient.Callback{PlayerIOClient.PlayerIOError})">
            <summary>Saves changes to database objects that already exists in BigDB.</summary>
            <param name="lockType">Which kind of lock to use when performing the save</param>
            <param name="changesets">The list of changes to apply to the database</param>
            <param name="createIfMissing">Create objects based on the changesets if there are no existings objects to modify</param>
            <param name="onSuccess">Callback method to be executed when request completes successfully</param>
            <param name="onError">Callback method to be executed if request fails</param>
        </member>
        <member name="M:PlayerIOClient.Internal.PlayerIOChannel.DeleteObjects(System.Collections.Generic.List{PlayerIOClient.Internal.PlayerIOChannel.BigDBObjectId})">
            <summary>Deletes the specified database objects</summary>
            <param name="objectIds">Identifiers for the objects to load</param>
        </member>
        <member name="M:PlayerIOClient.Internal.PlayerIOChannel.DeleteObjects(System.Collections.Generic.List{PlayerIOClient.Internal.PlayerIOChannel.BigDBObjectId},PlayerIOClient.Callback,PlayerIOClient.Callback{PlayerIOClient.PlayerIOError})">
            <summary>Deletes the specified database objects</summary>
            <param name="objectIds">Identifiers for the objects to load</param>
            <param name="onSuccess">Callback method to be executed when request completes successfully</param>
            <param name="onError">Callback method to be executed if request fails</param>
        </member>
        <member name="M:PlayerIOClient.Internal.PlayerIOChannel.LoadMyPlayerObject">
            <summary>Loads the database object corresponding to the player from the PlayerObjects table</summary>
        </member>
        <member name="M:PlayerIOClient.Internal.PlayerIOChannel.LoadMyPlayerObject(PlayerIOClient.Callback{PlayerIOClient.Internal.PlayerIOChannel.BigDBObject},PlayerIOClient.Callback{PlayerIOClient.PlayerIOError})">
            <summary>Loads the database object corresponding to the player from the PlayerObjects table</summary>
            <param name="onSuccess">Callback method to be executed when request completes successfully</param>
            <param name="onError">Callback method to be executed if request fails</param>
        </member>
        <member name="M:PlayerIOClient.Internal.PlayerIOChannel.LoadMatchingObjects(System.String,System.String,System.Collections.Generic.List{PlayerIOClient.Internal.PlayerIOChannel.ValueObject},System.Int32)">
            <summary>Loads database objects from the specificed table index whose index value matches the given value.</summary>
            <param name="table">The table containing the database objects to locate</param>
            <param name="index">The index to perform the lookup in</param>
            <param name="indexValue">The value to locate in the index</param>
            <param name="limit">The maximum amount of database objects to load</param>
        </member>
        <member name="M:PlayerIOClient.Internal.PlayerIOChannel.LoadMatchingObjects(System.String,System.String,System.Collections.Generic.List{PlayerIOClient.Internal.PlayerIOChannel.ValueObject},System.Int32,PlayerIOClient.Callback{System.Collections.Generic.List{PlayerIOClient.Internal.PlayerIOChannel.BigDBObject}},PlayerIOClient.Callback{PlayerIOClient.PlayerIOError})">
            <summary>Loads database objects from the specificed table index whose index value matches the given value.</summary>
            <param name="table">The table containing the database objects to locate</param>
            <param name="index">The index to perform the lookup in</param>
            <param name="indexValue">The value to locate in the index</param>
            <param name="limit">The maximum amount of database objects to load</param>
            <param name="onSuccess">Callback method to be executed when request completes successfully</param>
            <param name="onError">Callback method to be executed if request fails</param>
        </member>
        <member name="M:PlayerIOClient.Internal.PlayerIOChannel.LoadIndexRange(System.String,System.String,System.Collections.Generic.List{PlayerIOClient.Internal.PlayerIOChannel.ValueObject},System.Collections.Generic.List{PlayerIOClient.Internal.PlayerIOChannel.ValueObject},System.Int32)">
            <summary>Load database objects from the specified table index whose index value is inside the range between start and stop (both inclusive).</summary>
            <param name="table">The table containing the database objects to locate</param>
            <param name="index">The index to perform the lookup in</param>
            <param name="startIndexValue">The value to start the range search at</param>
            <param name="stopIndexValue">The value to end the range search at</param>
            <param name="limit">The maximum amount of entries to load</param>
        </member>
        <member name="M:PlayerIOClient.Internal.PlayerIOChannel.LoadIndexRange(System.String,System.String,System.Collections.Generic.List{PlayerIOClient.Internal.PlayerIOChannel.ValueObject},System.Collections.Generic.List{PlayerIOClient.Internal.PlayerIOChannel.ValueObject},System.Int32,PlayerIOClient.Callback{System.Collections.Generic.List{PlayerIOClient.Internal.PlayerIOChannel.BigDBObject}},PlayerIOClient.Callback{PlayerIOClient.PlayerIOError})">
            <summary>Load database objects from the specified table index whose index value is inside the range between start and stop (both inclusive).</summary>
            <param name="table">The table containing the database objects to locate</param>
            <param name="index">The index to perform the lookup in</param>
            <param name="startIndexValue">The value to start the range search at</param>
            <param name="stopIndexValue">The value to end the range search at</param>
            <param name="limit">The maximum amount of entries to load</param>
            <param name="onSuccess">Callback method to be executed when request completes successfully</param>
            <param name="onError">Callback method to be executed if request fails</param>
        </member>
        <member name="M:PlayerIOClient.Internal.PlayerIOChannel.DeleteIndexRange(System.String,System.String,System.Collections.Generic.List{PlayerIOClient.Internal.PlayerIOChannel.ValueObject},System.Collections.Generic.List{PlayerIOClient.Internal.PlayerIOChannel.ValueObject})">
            <summary>Delete all database objects from the specified table index whose index value is inside the range between start and stop (both inclusive).</summary>
            <param name="table">The table containing the database objects to delete</param>
            <param name="index">The index to perform the delete by</param>
            <param name="startIndexValue">The value to start the range search at</param>
            <param name="stopIndexValue">The value to end the range search at</param>
        </member>
        <member name="M:PlayerIOClient.Internal.PlayerIOChannel.DeleteIndexRange(System.String,System.String,System.Collections.Generic.List{PlayerIOClient.Internal.PlayerIOChannel.ValueObject},System.Collections.Generic.List{PlayerIOClient.Internal.PlayerIOChannel.ValueObject},PlayerIOClient.Callback,PlayerIOClient.Callback{PlayerIOClient.PlayerIOError})">
            <summary>Delete all database objects from the specified table index whose index value is inside the range between start and stop (both inclusive).</summary>
            <param name="table">The table containing the database objects to delete</param>
            <param name="index">The index to perform the delete by</param>
            <param name="startIndexValue">The value to start the range search at</param>
            <param name="stopIndexValue">The value to end the range search at</param>
            <param name="onSuccess">Callback method to be executed when request completes successfully</param>
            <param name="onError">Callback method to be executed if request fails</param>
        </member>
        <member name="M:PlayerIOClient.Internal.PlayerIOChannel.PayVaultReadHistory(System.UInt32,System.UInt32)">
            <summary>Read the users PayVault history in reverse chronological order</summary>
            <param name="page">The page to start at. Page 1 contains the latest transactions</param>
            <param name="pageSize">The size of each page</param>
        </member>
        <member name="M:PlayerIOClient.Internal.PlayerIOChannel.PayVaultReadHistory(System.UInt32,System.UInt32,PlayerIOClient.Callback{System.Collections.Generic.List{PlayerIOClient.Internal.PlayerIOChannel.PayVaultHistoryEntry}},PlayerIOClient.Callback{PlayerIOClient.PlayerIOError})">
            <summary>Read the users PayVault history in reverse chronological order</summary>
            <param name="page">The page to start at. Page 1 contains the latest transactions</param>
            <param name="pageSize">The size of each page</param>
            <param name="onSuccess">Callback method to be executed when request completes successfully</param>
            <param name="onError">Callback method to be executed if request fails</param>
        </member>
        <member name="M:PlayerIOClient.Internal.PlayerIOChannel.PayVaultRefresh(System.String)">
            <summary>Download a user's vault (balance and items)</summary>
            <param name="lastVersion">If specified, will only return vault items if value has changed since last version.</param>
        </member>
        <member name="M:PlayerIOClient.Internal.PlayerIOChannel.PayVaultRefresh(System.String,PlayerIOClient.Callback{PlayerIOClient.Internal.PlayerIOChannel.PayVaultContents},PlayerIOClient.Callback{PlayerIOClient.PlayerIOError})">
            <summary>Download a user's vault (balance and items)</summary>
            <param name="lastVersion">If specified, will only return vault items if value has changed since last version.</param>
            <param name="onSuccess">Callback method to be executed when request completes successfully</param>
            <param name="onError">Callback method to be executed if request fails</param>
        </member>
        <member name="M:PlayerIOClient.Internal.PlayerIOChannel.PayVaultConsume(System.Collections.Generic.List{System.String})">
            <summary>Consume one or more items from user's PayVault</summary>
            <param name="ids">The ids of the PayVaultItems to use</param>
        </member>
        <member name="M:PlayerIOClient.Internal.PlayerIOChannel.PayVaultConsume(System.Collections.Generic.List{System.String},PlayerIOClient.Callback{PlayerIOClient.Internal.PlayerIOChannel.PayVaultContents},PlayerIOClient.Callback{PlayerIOClient.PlayerIOError})">
            <summary>Consume one or more items from user's PayVault</summary>
            <param name="ids">The ids of the PayVaultItems to use</param>
            <param name="onSuccess">Callback method to be executed when request completes successfully</param>
            <param name="onError">Callback method to be executed if request fails</param>
        </member>
        <member name="M:PlayerIOClient.Internal.PlayerIOChannel.PayVaultCredit(System.UInt32,System.String)">
            <summary>Put coins into PayVault</summary>
            <param name="amount">The amount of coins to add to the vault</param>
            <param name="reason">The reason that will appear in the vault history</param>
        </member>
        <member name="M:PlayerIOClient.Internal.PlayerIOChannel.PayVaultCredit(System.UInt32,System.String,PlayerIOClient.Callback{PlayerIOClient.Internal.PlayerIOChannel.PayVaultContents},PlayerIOClient.Callback{PlayerIOClient.PlayerIOError})">
            <summary>Put coins into PayVault</summary>
            <param name="amount">The amount of coins to add to the vault</param>
            <param name="reason">The reason that will appear in the vault history</param>
            <param name="onSuccess">Callback method to be executed when request completes successfully</param>
            <param name="onError">Callback method to be executed if request fails</param>
        </member>
        <member name="M:PlayerIOClient.Internal.PlayerIOChannel.PayVaultDebit(System.UInt32,System.String)">
            <summary>Remove coins from PayVault</summary>
            <param name="amount">The coin amount to remove from the vault</param>
            <param name="reason">The reason that will appear in the vault history</param>
        </member>
        <member name="M:PlayerIOClient.Internal.PlayerIOChannel.PayVaultDebit(System.UInt32,System.String,PlayerIOClient.Callback{PlayerIOClient.Internal.PlayerIOChannel.PayVaultContents},PlayerIOClient.Callback{PlayerIOClient.PlayerIOError})">
            <summary>Remove coins from PayVault</summary>
            <param name="amount">The coin amount to remove from the vault</param>
            <param name="reason">The reason that will appear in the vault history</param>
            <param name="onSuccess">Callback method to be executed when request completes successfully</param>
            <param name="onError">Callback method to be executed if request fails</param>
        </member>
        <member name="M:PlayerIOClient.Internal.PlayerIOChannel.PayVaultBuy(System.Collections.Generic.List{PlayerIOClient.Internal.PlayerIOChannel.PayVaultBuyItemInfo},System.Boolean)">
            <summary>Buy PayVault items</summary>
            <param name="items">The list of items to buy</param>
            <param name="storeItems">Whether or not to store the items in the vault after purchase</param>
        </member>
        <member name="M:PlayerIOClient.Internal.PlayerIOChannel.PayVaultBuy(System.Collections.Generic.List{PlayerIOClient.Internal.PlayerIOChannel.PayVaultBuyItemInfo},System.Boolean,PlayerIOClient.Callback{PlayerIOClient.Internal.PlayerIOChannel.PayVaultContents},PlayerIOClient.Callback{PlayerIOClient.PlayerIOError})">
            <summary>Buy PayVault items</summary>
            <param name="items">The list of items to buy</param>
            <param name="storeItems">Whether or not to store the items in the vault after purchase</param>
            <param name="onSuccess">Callback method to be executed when request completes successfully</param>
            <param name="onError">Callback method to be executed if request fails</param>
        </member>
        <member name="M:PlayerIOClient.Internal.PlayerIOChannel.PayVaultGive(System.Collections.Generic.List{PlayerIOClient.Internal.PlayerIOChannel.PayVaultBuyItemInfo})">
            <summary>Give PayVault items to a user</summary>
            <param name="items">The list of items to give</param>
        </member>
        <member name="M:PlayerIOClient.Internal.PlayerIOChannel.PayVaultGive(System.Collections.Generic.List{PlayerIOClient.Internal.PlayerIOChannel.PayVaultBuyItemInfo},PlayerIOClient.Callback{PlayerIOClient.Internal.PlayerIOChannel.PayVaultContents},PlayerIOClient.Callback{PlayerIOClient.PlayerIOError})">
            <summary>Give PayVault items to a user</summary>
            <param name="items">The list of items to give</param>
            <param name="onSuccess">Callback method to be executed when request completes successfully</param>
            <param name="onError">Callback method to be executed if request fails</param>
        </member>
        <member name="M:PlayerIOClient.Internal.PlayerIOChannel.PayVaultPaymentInfo(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.List{PlayerIOClient.Internal.PlayerIOChannel.PayVaultBuyItemInfo})">
            <summary>Get payment-provider specific info for completing a purchase</summary>
            <param name="provider">Which PayVault provider to use.</param>
            <param name="purchaseArguments">PayVault provider specific data required to initiate payment</param>
            <param name="items">The list of items for BuyDirect, if any, otherwise the call is to buy coins</param>
        </member>
        <member name="M:PlayerIOClient.Internal.PlayerIOChannel.PayVaultPaymentInfo(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.List{PlayerIOClient.Internal.PlayerIOChannel.PayVaultBuyItemInfo},PlayerIOClient.Callback{System.Collections.Generic.Dictionary{System.String,System.String}},PlayerIOClient.Callback{PlayerIOClient.PlayerIOError})">
            <summary>Get payment-provider specific info for completing a purchase</summary>
            <param name="provider">Which PayVault provider to use.</param>
            <param name="purchaseArguments">PayVault provider specific data required to initiate payment</param>
            <param name="items">The list of items for BuyDirect, if any, otherwise the call is to buy coins</param>
            <param name="onSuccess">Callback method to be executed when request completes successfully</param>
            <param name="onError">Callback method to be executed if request fails</param>
        </member>
        <member name="M:PlayerIOClient.Internal.PlayerIOChannel.PayVaultUsePaymentInfo(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>Use payment-provider specific arguments for finalizing a purchase</summary>
            <param name="provider">Which PayVault provider to use.</param>
            <param name="providerArguments">PayVault provider specific arguments required to finalize payment</param>
        </member>
        <member name="M:PlayerIOClient.Internal.PlayerIOChannel.PayVaultUsePaymentInfo(System.String,System.Collections.Generic.Dictionary{System.String,System.String},PlayerIOClient.Callback{System.Collections.Generic.Dictionary{System.String,System.String}},PlayerIOClient.Callback{PlayerIOClient.PlayerIOError})">
            <summary>Use payment-provider specific arguments for finalizing a purchase</summary>
            <param name="provider">Which PayVault provider to use.</param>
            <param name="providerArguments">PayVault provider specific arguments required to finalize payment</param>
            <param name="onSuccess">Callback method to be executed when request completes successfully</param>
            <param name="onError">Callback method to be executed if request fails</param>
        </member>
        <member name="M:PlayerIOClient.Internal.PlayerIOChannel.PartnerPayTrigger(System.String,System.UInt32)">
            <summary>Triggers a PartnerPay action</summary>
            <param name="key">The key of the action to trigger</param>
            <param name="count">The number of actions to trigger, default should be 1</param>
        </member>
        <member name="M:PlayerIOClient.Internal.PlayerIOChannel.PartnerPayTrigger(System.String,System.UInt32,PlayerIOClient.Callback,PlayerIOClient.Callback{PlayerIOClient.PlayerIOError})">
            <summary>Triggers a PartnerPay action</summary>
            <param name="key">The key of the action to trigger</param>
            <param name="count">The number of actions to trigger, default should be 1</param>
            <param name="onSuccess">Callback method to be executed when request completes successfully</param>
            <param name="onError">Callback method to be executed if request fails</param>
        </member>
        <member name="M:PlayerIOClient.Internal.PlayerIOChannel.PartnerPaySetTag(System.String)">
            <summary>Sets (or changes) the partner id of the connected user</summary>
            <param name="partnerId">The id of the partner</param>
        </member>
        <member name="M:PlayerIOClient.Internal.PlayerIOChannel.PartnerPaySetTag(System.String,PlayerIOClient.Callback,PlayerIOClient.Callback{PlayerIOClient.PlayerIOError})">
            <summary>Sets (or changes) the partner id of the connected user</summary>
            <param name="partnerId">The id of the partner</param>
            <param name="onSuccess">Callback method to be executed when request completes successfully</param>
            <param name="onError">Callback method to be executed if request fails</param>
        </member>
        <member name="T:PlayerIOClient.DatabaseObject">
            <summary>
            This class represents a BigDB Database Object that has a Key and a collection of named properties.
            <para>There are methods for setting, getting, and removing properties, and changes to the object can be persisted to BigDB with the Save() method.</para>
            <para>Database objects are very similar to JSON objects and are most easily visualized as such. For example, we can visualize a car object like this:</para>
            <code>
            'car20312' = {
            	Name: 'OldSpeedy',
            	Stats:{
            		Acceleration: 3.2,
            		TopSpeed: 50,
            		Steering: 5,
            		WorkingBreaks:false
            	}
            	LatestLapTimes: ['20:34','22:03','22:30']
            }
            </code>
            <para>If we then want to create this object in BigDB, we would have to do this:</para>
            <code>
            DatabaseObject car = new DatabaseObject();
            car.Set("Name", "OldSpeedy");
            
            //Create nested stats object
            DatabaseObject stats = new DatabaseObject();
            stats.Set("Acceleration", 3.2);
            stats.Set("TopSpeed", 50);
            stats.Set("Steering", 5);
            stats.Set("WorkingBreaks", false);
            car.Set("Stats", stats);
            
            //Create laptimes array
            DatabaseArray laptimes = new DatabaseArray();
            laptimes.Add("20:34");
            laptimes.Add("22:03");
            laptimes.Add("22:30");
            car.Set("LatestLapTimes", laptimes);
            
            //Save car to table "Cars" under key "car20312"
            PlayerIO.BigDB.CreateObject("Cars", "car20312", car, null);
            </code>
            <para>To make it easier to work with nested objects, you can reference them directly by separating the property names with a dot. Using this, we can set the stats properties of the car like this instead:</para>
            <code>
            DatabaseObject car = new DatabaseObject();
            car.Set("Stats.Acceleration", 3.2);
            car.Set("Stats.TopSpeed", 50);
            car.Set("Stats.Steering", 5);
            car.Set("Stats.WorkingBreaks", false);
            </code>
            
            <para>When you want to read properties from a database object, you have to call the corresponding get method indicating the type of the property.</para>
            <code>
            PlayerIO.BigDB.Load("Cars", "car20312", delegate(DatabaseObject car) {
            	string name = car.GetString("Name");
            	float acceleration = car.GetFloat("Stats.Acceleration");
            	int topspeed = car.GetInt("Stats.TopSpeed");
            });
            </code>
            
            <para>BigDB doesn't enforce anything on your objects. Two objects in the same table do not need to have the same properties set, and do not need to have the same type on the same property. If you try to get a property that is missing, or if you are using a get method of the wrong type, you will get an exception.</para>
            <code>
            PlayerIO.BigDB.Load("Cars", "car20312", delegate(DatabaseObject car) {
            	//Name is a string, throws exception!
            	int name = car.GetInt("Name"); 
            	//Color does not exist, throws exception!
            	string color = car.GetString("Color"); 
            });
            </code>
            
            <para>One way of avoiding this is to first check the object if a certain property exists before reading this. You can do this with the Contains method.</para>
            <code>
            PlayerIO.BigDB.Load("Cars", "car20312", delegate(DatabaseObject car) {
            	if (!car.Contains("Name")) {
            		car.Set("Name", "Unknown");
            	}
            	if (car.Contains("Stats.Steering")) {
            		//...
            	}
            });
            </code>
            
            <para>Another way of avoiding errors is to specify a default value when calling a get method. If the object doesn't contain the property, the method will return your default value instead.</para>
            <code>
            PlayerIO.BigDB.Load("Cars", "car20312", delegate(DatabaseObject car) {
            	string color = car.GetString("Color", "Red");
            });
            </code>
            
            <para>You can also easily remove properties from your object with the Remove method.</para>
            <code>
            PlayerIO.BigDB.Load("Cars", "car20312", delegate(DatabaseObject car) {
            	car.Remove("Name");
            	car.Remove("Stats.TopSpeed");
            	if (!car.Contains("Name")) {
            		//Name property should be removed now.
            	}
            });
            </code>
            
            
            <para>Finally, to persist any changes you've made to an object you can call the Save method. Note that you can only call Save on an object that exist in the database. This means that the first time you save an object you have to call the PlayerIO.BigDB.CreateObject method, but all subsequent times you can call the Save method. There is also a property called ExistsInDatabase that you can use to check if it has been created or not.</para>
            <code>
            car.Set("Name", "NewSpeedy");
            car.Set("Stats.Acceleration", 5.0);
            if (car.ExistsInDatabase) {
            	car.Save();
            } else {
            	PlayerIO.BigDB.CreateObject("Cars", "car12345", null);
            }
            </code>
            
            <para>The Save method is asynchronous just like the CreateObject method in PlayerIO.BigDB, and you can specify a callback if you wish to do something when the object actually has been saved.</para>
            <code>
            car.Set("Name", "NewSpeedy");
            car.Set("Stats.Acceleration", 5.0);
            car.Save(delegate() {
            	//On successful save...
            });
            </code>
            
            </summary>
        </member>
        <member name="F:PlayerIOClient.DatabaseObject.Table">
            <summary>The name of the BigDB table this object belongs to</summary>
        </member>
        <member name="F:PlayerIOClient.DatabaseObject.Key">
            <summary>The key of the object.</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseObject.Save">
            <summary>Persist the object to the database</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseObject.Save(System.Boolean)">
            <summary>Persist the object to the database, using optimistic locking if specified</summary>
            <param name="useOptimisticLock">If true, the save will only be completed if the database object has not changed in BigDB since this instance was loaded.</param>
        </member>
        <member name="M:PlayerIOClient.DatabaseObject.Save(System.Boolean,System.Boolean)">
            <summary>Persist the object to the database, using optimistic locking and full overwrite if specified</summary>
            <param name="useOptimisticLock">If true, the save will only be completed if the database object has not changed in BigDB since this instance was loaded.</param>
            <param name="fullOverwrite">Will completely overwrite the database object in BigDB with the properties in this instance, instead of just sending the changed properties to the server.</param>
        </member>
        <member name="M:PlayerIOClient.DatabaseObject.Save(PlayerIOClient.Callback)">
            <summary>Persist the object to the database</summary>
            <param name="successCallback">Callback when the save succeeds</param>
        </member>
        <member name="M:PlayerIOClient.DatabaseObject.Save(PlayerIOClient.Callback,PlayerIOClient.Callback{PlayerIOClient.PlayerIOError})">
            <summary>Persist the object to the database</summary>
            <param name="successCallback">Callback when the save succeeds</param>
            <param name="errorCallback">Callback that will be called instead of successCallback if an error occurs during the save.</param>
        </member>
        <member name="M:PlayerIOClient.DatabaseObject.Save(System.Boolean,PlayerIOClient.Callback)">
            <summary>Persist the object to the database, using optimistic locking if specified</summary>
            <param name="useOptimisticLock">If true, the save will only be completed if the database object has not changed in BigDB since this instance was loaded.</param>
            <param name="successCallback">Callback when the save succeeds</param>
        </member>
        <member name="M:PlayerIOClient.DatabaseObject.Save(System.Boolean,PlayerIOClient.Callback,PlayerIOClient.Callback{PlayerIOClient.PlayerIOError})">
            <summary>Persist the object to the database, using optimistic locking if specified</summary>
            <param name="useOptimisticLock">If true, the save will only be completed if the database object has not changed in BigDB since this instance was loaded.</param>
            <param name="successCallback">Callback when the save succeeds</param>
            <param name="errorCallback">Callback that will be called instead of successCallback if an error occurs during the save.</param>
        </member>
        <member name="M:PlayerIOClient.DatabaseObject.Save(System.Boolean,System.Boolean,PlayerIOClient.Callback)">
            <summary>Persist the object to the database, using optimistic locking and full overwrite if specified</summary>
            <param name="useOptimisticLock">If true, the save will only be completed if the database object has not changed in BigDB since this instance was loaded.</param>
            <param name="fullOverwrite">Will completely overwrite the database object in BigDB with the properties in this instance, instead of just sending the changed properties to the server.</param>
            <param name="successCallback">Callback when the save succeeds</param>
        </member>
        <member name="M:PlayerIOClient.DatabaseObject.Save(System.Boolean,System.Boolean,PlayerIOClient.Callback,PlayerIOClient.Callback{PlayerIOClient.PlayerIOError})">
            <summary>Persist the object to the database, using optimistic locking and full overwrite if specified</summary>
            <param name="useOptimisticLock">If true, the save will only be completed if the database object has not changed in BigDB since this instance was loaded.</param>
            <param name="fullOverwrite">Will completely overwrite the database object in BigDB with the properties in this instance, instead of just sending the changed properties to the server.</param>
            <param name="successCallback">Callback when the save succeeds</param>
            <param name="errorCallback">Callback that will be called instead of successCallback if an error occurs during the save.</param>
        </member>
        <member name="M:PlayerIOClient.DatabaseObject.#ctor">
            <summary>DatabaseObject constructor</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseObject.Clear">
            <summary>Removes all properties on this object</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseObject.Remove(System.String)">
            <summary>Removes the value of the given property from this object</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseObject.Contains(System.String)">
            <summary>Returns true if the given property exists on this object</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseObject.TryGetValue(System.String,System.Object@)">
            <summary>If the given property exists, this method returns true and the value as object in the out parameter. If it does not, this method return false</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseObject.GetValue(System.String)">
            <summary>Get the given property as an object</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseObject.GetString(System.String)">
            <summary>Get the given string property</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseObject.GetString(System.String,System.String)">
            <summary>Get the given string property, falling back to the given default value if the string property does not exist</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseObject.GetInt(System.String)">
            <summary>Get the given int property</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseObject.GetInt(System.String,System.Int32)">
            <summary>Get the given int property, falling back to the given default value if the int property does not exist</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseObject.GetUInt(System.String)">
            <summary>Get the given uint property</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseObject.GetUInt(System.String,System.UInt32)">
            <summary>Get the given uint property, falling back to the given default value if the uint property does not exist</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseObject.GetLong(System.String)">
            <summary>Get the given long property</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseObject.GetLong(System.String,System.Int64)">
            <summary>Get the given long property, falling back to the given default value if the long property does not exist</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseObject.GetBool(System.String)">
            <summary>Get the given bool property</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseObject.GetBool(System.String,System.Boolean)">
            <summary>Get the given bool property, falling back to the given default value if the bool property does not exist</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseObject.GetFloat(System.String)">
            <summary>Get the given float property</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseObject.GetFloat(System.String,System.Single)">
            <summary>Get the given float property, falling back to the given default value if the float property does not exist</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseObject.GetDouble(System.String)">
            <summary>Get the given double property</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseObject.GetDouble(System.String,System.Double)">
            <summary>Get the given double property, falling back to the given default value if the double property does not exist</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseObject.GetBytes(System.String)">
            <summary>Get the given byte array property</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseObject.GetBytes(System.String,System.Byte[])">
            <summary>Get the given byte array property, falling back to the given default value if the byte array property does not exist</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseObject.GetDateTime(System.String)">
            <summary>Get the given datetime property</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseObject.GetDateTime(System.String,System.DateTime)">
            <summary>Get the given datetime property, falling back to the given default value if the datetime property does not exist</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseObject.GetObject(System.String)">
            <summary>Get the given object property</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseObject.GetArray(System.String)">
            <summary>Get the given array property</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseObject.Set(System.String,System.String)">
            <summary>Set the given property to the given string value</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseObject.Set(System.String,System.Int32)">
            <summary>Set the given property to the given int value</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseObject.Set(System.String,System.UInt32)">
            <summary>Set the given property to the given uint value</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseObject.Set(System.String,System.Int64)">
            <summary>Set the given property to the given long value</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseObject.Set(System.String,System.Boolean)">
            <summary>Set the given property to the given bool value</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseObject.Set(System.String,System.Single)">
            <summary>Set the given property to the given float value</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseObject.Set(System.String,System.Double)">
            <summary>Set the given property to the given double value</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseObject.Set(System.String,System.Byte[])">
            <summary>Set the given property to the given byte array value</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseObject.Set(System.String,System.DateTime)">
            <summary>Set the given property to the given datetime value</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseObject.Set(System.String,PlayerIOClient.DatabaseObject)">
            <summary>Set the given property to the given object</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseObject.Set(System.String,PlayerIOClient.DatabaseArray)">
            <summary>Set the given property to the given array</summary>
        </member>
        <member name="P:PlayerIOClient.DatabaseObject.ExistsInDatabase">
            <summary>Returns true if the object has been persisted</summary>
        </member>
        <member name="P:PlayerIOClient.DatabaseObject.Count">
            <summary>Returns the number of properties on this object</summary>
        </member>
        <member name="P:PlayerIOClient.DatabaseObject.Item(System.String)">
            <summary>Get the given property as an object</summary>
        </member>
        <member name="P:PlayerIOClient.DatabaseObject.Properties">
            <summary>Get the names of all properties on this object</summary>
        </member>
        <member name="T:PlayerIOClient.DatabaseArray">
            <summary>
            Represents an BigDB array of values that can be accessed by index.
            <para>DatabaseArray is very similar to the DatabaseObject class since it has methods for getting, setting, checking and removing values. But unlike DatabaseObject, this class also has methods for adding and inserting values, and there is no Save method, since these cannot be saved to a BigDB table, they always have to be a property of an object.</para>
            <para>If we for example have an object that can be visualized like this:</para>
            <code>
            'car54321' = {
            	Name: 'OldSpeedy',
            	LatestLapTimes: [
            		{
            			Time:'20:34',
            			Position:1
            		},
            		{
            			Time:'22:03',
            			Position:4
            		},
            		{
            			Time:'22:30',
            			Position:5
            		}
            	]
            }
            </code>
            <para>Then we would create it in BigDB like this:</para>
            <code>
            //Create new object
            DatabaseObject car = new DatabaseObject();
            car.Set("Name", "OldSpeedy");
            
            //Make laptimes
            DatabaseObject laptime1 = new DatabaseObject();
            laptime1.Set("Time", "20:34");
            laptime1.Set("Position", 1);
            DatabaseObject laptime2 = new DatabaseObject();
            laptime2.Set("Time", "22:03");
            laptime2.Set("Position", 4);
            DatabaseObject laptime3 = new DatabaseObject();
            laptime3.Set("Time", "22:30");
            laptime3.Set("Position", 5);
            
            //Make array and add laptimes
            DatabaseArray laptimes = new DatabaseArray();
            laptimes.Add(laptime1);
            laptimes.Add(laptime2);
            laptimes.Add(laptime3);
            
            //Add array to car object
            car.Set("LatestLapTimes", laptimes);
            
            //Save car to table "Cars" under key "car54321"
            PlayerIO.BigDB.CreateObject("Cars", "car54321", car, null);
            </code>
            
            <para>However, just like DatabaseObject, DatabaseArray also supports nested property names, and we can refer to values in the array with their index number. Using this, we can make the example object in an easier way, like this:</para>
            <code>
            DatabaseObject car = new DatabaseObject();
            car.Set("Name", "OldSpeedy");
            car.Set("LatestLapTimes", new DatabaseArray());
            car.Set("LatestLapTimes.0.Time", "20:34");
            car.Set("LatestLapTimes.0.Position", 1);
            car.Set("LatestLapTimes.1.Time", "22:03");
            car.Set("LatestLapTimes.1.Position", 4);
            car.Set("LatestLapTimes.2.Time", "22:30");
            car.Set("LatestLapTimes.2.Position", 5);
            </code>
            
            <para>Getting values works exactly like for DatabaseObject, and we can also use nested properties.</para>
            <code>
            PlayerIO.BigDB.Load("Cars", "car54321", delegate(DatabaseObject car) {
            	//Get position from first laptime
            	DatabaseArray laptimes = car.GetArray("LatestLapTimes");
            	DatabaseObject laptime = laptimes.GetObject(0);
            	int position = laptime.GetInt("Position");
            
            	//Get position from second laptime
            	int position2 = laptimes.GetInt("1.Position");
            	
            	//Or get position from third laptime directly
            	int position3 = car.GetInt("LatestLapTimes.2.Position");
            });
            </code>
            
            <para>In addition to getting and setting values, we can also add values to the end of the array, insert values in the middle of it, or remove values in the middle of it. Note that the arrays are sparse, this means that removing a value doesn't shift the indexes of the following values, and we can set any value beyond the last value of the array.</para>
            <code>
            DatabaseArray arr = new DatabaseArray();
            //We make an array like this: ['a', 'c']
            arr.Add("a");
            arr.Add("c");
            
            //Now it will look like this: ['a', 'c', 'd']
            arr.Add("d");
            
            //We insert a value where c is to get this: ['a', 'b', 'c', 'd']
            arr.Insert(1, "b");
            
            //If we then remove the third value we get this: ['a', 'b', null, 'd']
            arr.RemoveAt(2);
            
            //Finally, we set the sixth value and get: ['a', 'b', null, 'd', null, 'f']
            arr.Set(5, "f");
            </code>
            </summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseArray.#ctor">
            <summary>DatabaseArray constructor</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseArray.Clear">
            <summary>Remove all values from this array</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseArray.RemoveAt(System.Int32)">
            <summary>Remove the value at the given index</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseArray.Contains(System.Int32)">
            <summary>Returns true if a value exists at the given index</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseArray.GetValue(System.Int32)">
            <summary>Get the value at the given index as an object</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseArray.GetString(System.Int32)">
            <summary>Get the string value at the given index</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseArray.GetString(System.Int32,System.String)">
            <summary>Get the string value at the given index, falling back to the given default value if the value was at the index is null</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseArray.GetInt(System.Int32)">
            <summary>Get the int value at the given index</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseArray.GetInt(System.Int32,System.Int32)">
            <summary>Get the int value at the given index, falling back to the given default value if the value was at the index is null</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseArray.GetUInt(System.Int32)">
            <summary>Get the uint value at the given index</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseArray.GetUInt(System.Int32,System.UInt32)">
            <summary>Get the uint value at the given index, falling back to the given default value if the value was at the index is null</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseArray.GetLong(System.Int32)">
            <summary>Get the long value at the given index</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseArray.GetLong(System.Int32,System.Int64)">
            <summary>Get the long value at the given index, falling back to the given default value if the value was at the index is null</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseArray.GetBool(System.Int32)">
            <summary>Get the bool value at the given index</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseArray.GetBool(System.Int32,System.Boolean)">
            <summary>Get the bool value at the given index, falling back to the given default value if the value was at the index is null</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseArray.GetFloat(System.Int32)">
            <summary>Get the float value at the given index</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseArray.GetFloat(System.Int32,System.Single)">
            <summary>Get the float value at the given index, falling back to the given default value if the value was at the index is null</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseArray.GetDouble(System.Int32)">
            <summary>Get the double value at the given index</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseArray.GetDouble(System.Int32,System.Double)">
            <summary>Get the double value at the given index, falling back to the given default value if the value was at the index is null</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseArray.GetBytes(System.Int32)">
            <summary>Get the byte array value at the given index</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseArray.GetBytes(System.Int32,System.Byte[])">
            <summary>Get the byte value at the given index, falling back to the given default value if the value was at the index is null</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseArray.GetDateTime(System.Int32)">
            <summary>Get the datetime value at the given index</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseArray.GetDateTime(System.Int32,System.DateTime)">
            <summary>Get the datetime value at the given index, falling back to the given default value if the value was at the index is null</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseArray.GetObject(System.Int32)">
            <summary>Get the object at the given index</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseArray.GetArray(System.Int32)">
            <summary>Get the array at the given index</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseArray.Set(System.Int32,System.String)">
            <summary>Set the value at the given index to the given string</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseArray.Set(System.Int32,System.Int32)">
            <summary>Set the value at the given index to the given int</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseArray.Set(System.Int32,System.UInt32)">
            <summary>Set the value at the given index to the given uint</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseArray.Set(System.Int32,System.Int64)">
            <summary>Set the value at the given index to the given long</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseArray.Set(System.Int32,System.Boolean)">
            <summary>Set the value at the given index to the given bool</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseArray.Set(System.Int32,System.Single)">
            <summary>Set the value at the given index to the given float</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseArray.Set(System.Int32,System.Double)">
            <summary>Set the value at the given index to the given double</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseArray.Set(System.Int32,System.Byte[])">
            <summary>Set the value at the given index to the given byte array</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseArray.Set(System.Int32,System.DateTime)">
            <summary>Set the value at the given index to the given datetime</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseArray.Set(System.Int32,PlayerIOClient.DatabaseObject)">
            <summary>Set the value at the given index to the given object</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseArray.Set(System.Int32,PlayerIOClient.DatabaseArray)">
            <summary>Set the value at the given index to the given array</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseArray.Insert(System.Int32,System.String)">
            <summary>Insert the given string value at the given index</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseArray.Insert(System.Int32,System.Int32)">
            <summary>Insert the given int value at the given index</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseArray.Insert(System.Int32,System.UInt32)">
            <summary>Insert the given uint value at the given index</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseArray.Insert(System.Int32,System.Int64)">
            <summary>Insert the given long value at the given index</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseArray.Insert(System.Int32,System.Boolean)">
            <summary>Insert the given bool value at the given index</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseArray.Insert(System.Int32,System.Single)">
            <summary>Insert the given float value at the given index</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseArray.Insert(System.Int32,System.Double)">
            <summary>Insert the given double value at the given index</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseArray.Insert(System.Int32,System.Byte[])">
            <summary>Insert the given byte array value at the given index</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseArray.Insert(System.Int32,System.DateTime)">
            <summary>Insert the given datetime value at the given index</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseArray.Insert(System.Int32,PlayerIOClient.DatabaseObject)">
            <summary>Insert the given object at the given index</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseArray.Insert(System.Int32,PlayerIOClient.DatabaseArray)">
            <summary>Insert the given array at the given index</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseArray.Add(System.String)">
            <summary>Add the given string value to the array</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseArray.Add(System.Int32)">
            <summary>Add the given int value to the array</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseArray.Add(System.UInt32)">
            <summary>Add the given uint value to the array</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseArray.Add(System.Int64)">
            <summary>Add the given long value to the array</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseArray.Add(System.Boolean)">
            <summary>Add the given bool value to the array</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseArray.Add(System.Single)">
            <summary>Add the given float value to the array</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseArray.Add(System.Double)">
            <summary>Add the given double value to the array</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseArray.Add(System.Byte[])">
            <summary>Add the given byte array value to the array</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseArray.Add(System.DateTime)">
            <summary>Add the given datetime value to the array</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseArray.Add(PlayerIOClient.DatabaseObject)">
            <summary>Add the given object to the array</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseArray.Add(PlayerIOClient.DatabaseArray)">
            <summary>Add the given array to the array</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseArray.Remove(System.String)">
            <summary>Removes the value of the given property from this object</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseArray.Contains(System.String)">
            <summary>Returns true if the given property exists on this object</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseArray.TryGetValue(System.String,System.Object@)">
            <summary>If the given property exists, this method returns true and the value as object in the out parameter. If it does not, this method return false</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseArray.GetValue(System.String)">
            <summary>Get the given property as an object</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseArray.GetString(System.String)">
            <summary>Get the given string property</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseArray.GetString(System.String,System.String)">
            <summary>Get the given string property, falling back to the given default value if the string property does not exist</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseArray.GetInt(System.String)">
            <summary>Get the given int property</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseArray.GetInt(System.String,System.Int32)">
            <summary>Get the given int property, falling back to the given default value if the int property does not exist</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseArray.GetUInt(System.String)">
            <summary>Get the given uint property</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseArray.GetUInt(System.String,System.UInt32)">
            <summary>Get the given uint property, falling back to the given default value if the uint property does not exist</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseArray.GetLong(System.String)">
            <summary>Get the given long property</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseArray.GetLong(System.String,System.Int64)">
            <summary>Get the given long property, falling back to the given default value if the long property does not exist</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseArray.GetBool(System.String)">
            <summary>Get the given bool property</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseArray.GetBool(System.String,System.Boolean)">
            <summary>Get the given bool property, falling back to the given default value if the bool property does not exist</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseArray.GetFloat(System.String)">
            <summary>Get the given float property</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseArray.GetFloat(System.String,System.Single)">
            <summary>Get the given float property, falling back to the given default value if the float property does not exist</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseArray.GetDouble(System.String)">
            <summary>Get the given double property</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseArray.GetDouble(System.String,System.Double)">
            <summary>Get the given double property, falling back to the given default value if the double property does not exist</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseArray.GetBytes(System.String)">
            <summary>Get the given byte array property</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseArray.GetBytes(System.String,System.Byte[])">
            <summary>Get the given byte array property, falling back to the given default value if the byte array property does not exist</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseArray.GetDateTime(System.String)">
            <summary>Get the given datetime property</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseArray.GetDateTime(System.String,System.DateTime)">
            <summary>Get the given datetime property, falling back to the given default value if the datetime property does not exist</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseArray.GetObject(System.String)">
            <summary>Get the given object property</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseArray.GetArray(System.String)">
            <summary>Get the given array property</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseArray.Set(System.String,System.String)">
            <summary>Set the given property to the given string value</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseArray.Set(System.String,System.Int32)">
            <summary>Set the given property to the given int value</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseArray.Set(System.String,System.UInt32)">
            <summary>Set the given property to the given uint value</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseArray.Set(System.String,System.Int64)">
            <summary>Set the given property to the given long value</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseArray.Set(System.String,System.Boolean)">
            <summary>Set the given property to the given bool value</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseArray.Set(System.String,System.Single)">
            <summary>Set the given property to the given float value</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseArray.Set(System.String,System.Double)">
            <summary>Set the given property to the given double value</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseArray.Set(System.String,System.Byte[])">
            <summary>Set the given property to the given byte array value</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseArray.Set(System.String,System.DateTime)">
            <summary>Set the given property to the given datetime value</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseArray.Set(System.String,PlayerIOClient.DatabaseObject)">
            <summary>Set the given property to the given object</summary>
        </member>
        <member name="M:PlayerIOClient.DatabaseArray.Set(System.String,PlayerIOClient.DatabaseArray)">
            <summary>Set the given property to the given array</summary>
        </member>
        <member name="P:PlayerIOClient.DatabaseArray.Count">
            <summary>
            Returns the number of values in this array.
            If set to a smaller number than the current count, it will truncate the array.
            </summary>
        </member>
        <member name="P:PlayerIOClient.DatabaseArray.Item(System.Int32)">
            <summary>Get the value at the given index as an object</summary>
        </member>
        <member name="P:PlayerIOClient.DatabaseArray.Indexes">
            <summary>Returns an enumerator that iterates over the indexes in this array that contain values.</summary>
        </member>
        <member name="P:PlayerIOClient.DatabaseArray.IndexesAndValues">
            <summary>Returns an enumerator that iterates over all the indexes and values in this array.</summary>
        </member>
        <member name="T:PlayerIOClient.ErrorLog">
            <summary>
            The Player.IO ErrorLog service
            <para>Here are some simple examples:</para>
            <code>
            PlayerIO.ErrorLog.WriteError("Error in my method");
            
            try {
            	//Some code that can throw an exception...
            } catch (Exception e) {
            	PlayerIO.ErrorLog.WriteError("Exception in my method", e);
            }
            </code>
            </summary>
        </member>
        <member name="M:PlayerIOClient.ErrorLog.WriteError(System.String)">
            <summary>Write an entry to the game's error log. In development the errors are just written to the console, in production they're written to a database and browseable from the admin panel</summary>
            <param name="error">A short string describing the error without details. Example 'Unhandled exception'</param>
        </member>
        <member name="M:PlayerIOClient.ErrorLog.WriteError(System.String,System.Exception)">
            <summary>Write an entry to the game's error log. In development the error are just written to the console, in production they're written to a database and browseable from the admin panel</summary>
            <param name="error">A short string describing the error without details. Example 'Unhandled exception'</param>
            <param name="exception">The exception that caused the error</param>
        </member>
        <member name="M:PlayerIOClient.ErrorLog.WriteError(System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>Write an entry to the games error log. In development the error are just written to the console, in production they're written to a database and browseable from the admin panel</summary>
            <param name="error">A short string describing the error without details. Example 'Object not set to instance of an object'</param>
            <param name="details">Describe the error in more detail if you have it. Example 'couldn't find the user 'bob' in the current game'</param>
            <param name="stacktrace">The stacktrace (if available) of the error</param>
            <param name="extraData">Any extra data you'd like to associate with the error log entry</param>
        </member>
        <member name="T:PlayerIOClient.Multiplayer">
            <summary>
            The Player.IO Multiplayer Service
            <para>.</para>
            </summary>
        </member>
        <member name="M:PlayerIOClient.Multiplayer.CreateRoom(System.String,System.String,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>Create a multiplayer room on the Player.IO infrastructure</summary>
            <param name="roomId">The id you wish to assign to your new room - You can use this to connect to the specific room later as long as it still exists</param>
            <param name="roomType">The name of the room type you wish to run the room as. This value should match one of the [RoomType(...)] attributes of your uploaded code. A room type of 'bounce' is always available.</param>
            <param name="visible">Should the room be visible when listing rooms with GetRooms</param>
            <param name="roomData">The data to initialize the room with, this can be read with ListRooms and changed from the serverside</param>
            <returns>The id of the room that was created</returns>
        </member>
        <member name="M:PlayerIOClient.Multiplayer.CreateRoom(System.String,System.String,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.String},PlayerIOClient.Callback{System.String})">
            <summary>Create a multiplayer room on the Player.IO infrastructure</summary>
            <param name="roomId">The id you wish to assign to your new room - You can use this to connect to the specific room later as long as it still exists</param>
            <param name="roomType">The name of the room type you wish to run the room as. This value should match one of the [RoomType(...)] attributes of your uploaded code. A room type of 'bounce' is always available.</param>
            <param name="visible">Should the room be visible when listing rooms with GetRooms</param>
            <param name="roomData">The data to initialize the room with, this can be read with ListRooms and changed from the serverside</param>
            <param name="successCallback">Callback with the id of the room that was created</param>
        </member>
        <member name="M:PlayerIOClient.Multiplayer.CreateRoom(System.String,System.String,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.String},PlayerIOClient.Callback{System.String},PlayerIOClient.Callback{PlayerIOClient.PlayerIOError})">
            <summary>Create a multiplayer room on the Player.IO infrastructure</summary>
            <param name="roomId">The id you wish to assign to your new room - You can use this to connect to the specific room later as long as it still exists</param>
            <param name="roomType">The name of the room type you wish to run the room as. This value should match one of the [RoomType(...)] attributes of your uploaded code. A room type of 'bounce' is always available.</param>
            <param name="visible">Should the room be visible when listing rooms with GetRooms</param>
            <param name="roomData">The data to initialize the room with, this can be read with ListRooms and changed from the serverside</param>
            <param name="successCallback">Callback with the id of the room that was created</param>
            <param name="errorCallback">Callback that will be called instead of successCallback if an error occurs during the room creation.</param>
        </member>
        <member name="M:PlayerIOClient.Multiplayer.JoinRoom(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>Join a running multiplayer room</summary>
            <param name="roomId">The id of the room you wish to connect to</param>
            <param name="joinData">Data to send to the room with additional information about the join </param>
            <returns>A connection into the room</returns>
        </member>
        <member name="M:PlayerIOClient.Multiplayer.JoinRoom(System.String,System.Collections.Generic.Dictionary{System.String,System.String},PlayerIOClient.Callback{PlayerIOClient.Connection})">
            <summary>Create an multiplayer room on the Player.IO infrastructure</summary>
            <param name="roomId">The id of the room you wish to connect to</param>
            <param name="joinData">Data to send to the room with additional information about the join </param>
            <param name="successCallback">Callback with a connection into the room</param>
        </member>
        <member name="M:PlayerIOClient.Multiplayer.JoinRoom(System.String,System.Collections.Generic.Dictionary{System.String,System.String},PlayerIOClient.Callback{PlayerIOClient.Connection},PlayerIOClient.Callback{PlayerIOClient.PlayerIOError})">
            <summary>Create an multiplayer room on the Player.IO infrastructure</summary>
            <param name="roomId">The id of the room you wish to connect to</param>
            <param name="joinData">Data to send to the room with additional information about the join </param>
            <param name="successCallback">Callback with a connection into the room</param>
            <param name="errorCallback">Callback that will be called instead of successCallback if an error occurs</param>
        </member>
        <member name="M:PlayerIOClient.Multiplayer.ListRooms(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Int32,System.Int32)">
            <summary>List the currently running multiplayer rooms</summary>
            <param name="roomType">The type of room you wish to list</param>
            <param name="searchCriteria">Only rooms with the same values in their roomdata will be returned</param>
            <param name="resultLimit">The maximum amount of rooms you want to receive. Use 0 for 'as many as possible'.</param>
            <param name="resultOffset">The offset into the list you wish</param>
            <returns>A list of rooms matching the search criteria</returns>
        </member>
        <member name="M:PlayerIOClient.Multiplayer.ListRooms(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Int32,System.Int32,PlayerIOClient.Callback{PlayerIOClient.RoomInfo[]})">
            <summary>List the currently running multiplayer rooms</summary>
            <param name="roomType">The type of room you wish to list</param>
            <param name="searchCriteria">Only rooms with the same values in their roomdata will be returned</param>
            <param name="resultLimit">The maximum amount of rooms you want to receive. Use 0 for 'as many as possible'.</param>
            <param name="resultOffset">The offset into the list you wish</param>
            <param name="successCallback">Callback with a list of rooms matching the search criteria</param>
        </member>
        <member name="M:PlayerIOClient.Multiplayer.ListRooms(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Int32,System.Int32,PlayerIOClient.Callback{PlayerIOClient.RoomInfo[]},PlayerIOClient.Callback{PlayerIOClient.PlayerIOError})">
            <summary>List the currently running multiplayer rooms</summary>
            <param name="roomType">The type of room you wish to list</param>
            <param name="searchCriteria">Only rooms with the same values in their roomdata will be returned</param>
            <param name="resultLimit">The maximum amount of rooms you want to receive. Use 0 for 'as many as possible'.</param>
            <param name="resultOffset">The offset into the list you wish</param>
            <param name="successCallback">Callback with a list of rooms matching the search criteria</param>
            <param name="errorCallback">Callback that will be called instead of successCallback if an error occurs</param>
        </member>
        <member name="M:PlayerIOClient.Multiplayer.CreateJoinRoom(System.String,System.String,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>Creates a multiplayer room (if it does not exist already) and joins it.</summary>
            <param name="roomId">The id of the room you wish to create/join</param>
            <param name="roomType">The name of the room type you wish to run the room as. This value should match one of the [RoomType(...)] attributes of your uploaded code. A room type of 'bounce' is always available.</param>
            <param name="visible">If the room doesn't exist: Should the room be visible when listing rooms with GetRooms upon creation</param>
            <param name="roomData">If the room doesn't exist: The data to initialize the room with upon creation</param>
            <param name="joinData">Data to send to the room with additional information about the join </param>
            <returns>A connection into the room that was created</returns>
        </member>
        <member name="M:PlayerIOClient.Multiplayer.CreateJoinRoom(System.String,System.String,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String},PlayerIOClient.Callback{PlayerIOClient.Connection})">
            <summary>Creates a multiplayer room (if it does not exist already) and joins it.</summary>
            <param name="roomId">The id of the room you wish to create/join</param>
            <param name="roomType">The name of the room type you wish to run the room as. This value should match one of the [RoomType(...)] attributes of your uploaded code. A room type of 'bounce' is always available.</param>
            <param name="visible">If the room doesn't exist: Should the room be visible when listing rooms with GetRooms upon creation</param>
            <param name="roomData">If the room doesn't exist: The data to initialize the room with upon creation</param>
            <param name="joinData">Data to send to the room with additional information about the join </param>
            <param name="successCallback">Callback with a connection into the room that was created</param>
        </member>
        <member name="M:PlayerIOClient.Multiplayer.CreateJoinRoom(System.String,System.String,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String},PlayerIOClient.Callback{PlayerIOClient.Connection},PlayerIOClient.Callback{PlayerIOClient.PlayerIOError})">
            <summary>Creates a multiplayer room (if it does not exist already) and joins it.</summary>
            <param name="roomId">The id of the room you wish to create/join</param>
            <param name="roomType">The name of the room type you wish to run the room as. This value should match one of the [RoomType(...)] attributes of your uploaded code. A room type of 'bounce' is always available.</param>
            <param name="visible">If the room doesn't exist: Should the room be visible when listing rooms with GetRooms upon creation</param>
            <param name="roomData">If the room doesn't exist: The data to initialize the room with upon creation</param>
            <param name="joinData">Data to send to the room with additional information about the join </param>
            <param name="successCallback">Callback with a connection into the room that was created</param>
            <param name="errorCallback">Callback that will be called instead of successCallback if an error occurs</param>
        </member>
        <member name="P:PlayerIOClient.Multiplayer.DevelopmentServer">
            <summary>
            If not null, rooms will be created on the development server at the address defined by the server endpoint, instead of using the live Player.IO servers.
            </summary>
        </member>
        <member name="T:PlayerIOClient.QuickConnect">
            <summary>
            Entry class for making a QuickConnect connection to Player.IO
            <para>Here is an example on how to register a new SimpleUser:</para>
            <code>
            //Register a SimpleUser
            PlayerIO.QuickConnect.SimpleRegister(
            	"[Enter your game id here]",
            	"username",
            	"password",
            	"email",
            	null, //Optional captchakey
            	null, //Optional captchavalue
            	null, //Optional extra data
            	null, //Optional partner id
            	delegate(Client client) {
            		//Here's a client, do something with the client.
            	},
            	delegate(PlayerIORegistrationError error) {
            		Console.WriteLine(error.Message);
            	}
            );
            </code>
            <para>And a returning user can connect like this:</para>
            <code>
            //Connect with a SimpleUser
            PlayerIO.QuickConnect.SimpleConnect(
            	"[Enter your game id here]",
            	"username",
            	"password",
            	delegate(Client client) {
            		//Here's a client, do something with the client.
            	},
            	delegate(PlayerIORegistrationError error) {
            		Console.WriteLine(error.Message);
            	}
            );
            </code>
            <para>After registering or connecting, you get a Client object which you can then use just as if you used the regular Connect method.</para>
            <para>Note that unlike the regular Connect method you don't specify the name of the connection to use, instead you set this up in the QuickConnect admin panel for your game.</para>
            </summary>
        </member>
        <member name="M:PlayerIOClient.QuickConnect.SimpleConnect(System.String,System.String,System.String)">
            <summary>Authenticates a user in the simple user db and returns a connection token.</summary>
            <param name="gameId">The game id of the game you wish to connect to. This value can be found in the admin panel</param>
            <param name="usernameOrEmail">The username or email of the user you wish to authenticate.</param>
            <param name="password">The password of the user you wish to authenticate.</param>
            <returns>The connected client</returns>
        </member>
        <member name="M:PlayerIOClient.QuickConnect.SimpleConnect(System.String,System.String,System.String,PlayerIOClient.Callback{PlayerIOClient.Client})">
            <summary>Authenticates a user in the simple user db and returns a connection token.</summary>
            <param name="gameId">The game id of the game you wish to connect to. This value can be found in the admin panel</param>
            <param name="usernameOrEmail">The username or email of the user you wish to authenticate.</param>
            <param name="password">The password of the user you wish to authenticate.</param>
            <param name="successCallback">Callback with the connected client, if successful</param>
        </member>
        <member name="M:PlayerIOClient.QuickConnect.SimpleConnect(System.String,System.String,System.String,PlayerIOClient.Callback{PlayerIOClient.Client},PlayerIOClient.Callback{PlayerIOClient.PlayerIOError})">
            <summary>Authenticates a user in the simple user db and returns a connection token.</summary>
            <param name="gameId">The game id of the game you wish to connect to. This value can be found in the admin panel</param>
            <param name="usernameOrEmail">The username or email of the user you wish to authenticate.</param>
            <param name="password">The password of the user you wish to authenticate.</param>
            <param name="successCallback">Callback with the connected client, if successful</param>
            <param name="errorCallback">Callback that will be called instead of successCallback if an error occurs.</param>
        </member>
        <member name="M:PlayerIOClient.QuickConnect.SimpleGetCaptcha(System.String,System.Int32,System.Int32)">
            <summary>Creates a Captcha image and key, to be used for registrations where the added security of Captcha is required..</summary>
            <param name="gameId">The game id of the game you wish to connect to. This value can be found in the admin panel.</param>
            <param name="width">The width of the Captcha image.</param>
            <param name="height">The height of the Captcha image.</param>
            <returns>Information about the captcha image</returns>
        </member>
        <member name="M:PlayerIOClient.QuickConnect.SimpleGetCaptcha(System.String,System.Int32,System.Int32,PlayerIOClient.Callback{PlayerIOClient.SimpleGetCaptchaOutput})">
            <summary>Creates a Captcha image and key, to be used for registrations where the added security of Captcha is required..</summary>
            <param name="gameId">The game id of the game you wish to connect to. This value can be found in the admin panel.</param>
            <param name="width">The width of the Captcha image.</param>
            <param name="height">The height of the Captcha image.</param>
            <param name="successCallback">Callback with information about the captcha image, if successful</param>
        </member>
        <member name="M:PlayerIOClient.QuickConnect.SimpleGetCaptcha(System.String,System.Int32,System.Int32,PlayerIOClient.Callback{PlayerIOClient.SimpleGetCaptchaOutput},PlayerIOClient.Callback{PlayerIOClient.PlayerIOError})">
            <summary>Creates a Captcha image and key, to be used for registrations where the added security of Captcha is required..</summary>
            <param name="gameId">The game id of the game you wish to connect to. This value can be found in the admin panel.</param>
            <param name="width">The width of the Captcha image.</param>
            <param name="height">The height of the Captcha image.</param>
            <param name="successCallback">Callback with information about the captcha image, if successful</param>
            <param name="errorCallback">Callback that will be called instead of successCallback if an error occurs.</param>
        </member>
        <member name="M:PlayerIOClient.QuickConnect.SimpleRegister(System.String,System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>Registers a new user in the simple user db and returns a connection token.</summary>
            <param name="gameId">The game id of the game you wish to connect to. This value can be found in the admin panel.</param>
            <param name="username">The username of the new user.</param>
            <param name="password">The password of the new user.</param>
            <param name="email">The email of the new user. (optional)</param>
            <param name="captchaKey">(only if captcha is required) The key of the Captcha image used to get the user to write in the Captcha value</param>
            <param name="captchaValue">(only if captcha is required) The string the user entered in response to the captcha image</param>
            <param name="extraData">Any extra data that you wish to store with the user such as gender, birthdate, etc. (optional)</param>
            <param name="partnerId">The PartnerPay partner id this user should be tagged with, if you are using the PartnerPay system.</param>
            <returns>The connected client</returns>
        </member>
        <member name="M:PlayerIOClient.QuickConnect.SimpleRegister(System.String,System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String,PlayerIOClient.Callback{PlayerIOClient.Client})">
            <summary>Registers a new user in the simple user db and returns a connection token.</summary>
            <param name="gameId">The game id of the game you wish to connect to. This value can be found in the admin panel.</param>
            <param name="username">The username of the new user.</param>
            <param name="password">The password of the new user.</param>
            <param name="email">The email of the new user. (optional)</param>
            <param name="captchaKey">(only if captcha is required) The key of the Captcha image used to get the user to write in the Captcha value</param>
            <param name="captchaValue">(only if captcha is required) The string the user entered in response to the captcha image</param>
            <param name="extraData">Any extra data that you wish to store with the user such as gender, birthdate, etc. (optional)</param>
            <param name="partnerId">The PartnerPay partner id this user should be tagged with, if you are using the PartnerPay system.</param>
            <param name="successCallback">Callback with the connected client, if successful</param>
        </member>
        <member name="M:PlayerIOClient.QuickConnect.SimpleRegister(System.String,System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String,PlayerIOClient.Callback{PlayerIOClient.Client},PlayerIOClient.Callback{PlayerIOClient.PlayerIORegistrationError})">
            <summary>Registers a new user in the simple user db and returns a connection token.</summary>
            <param name="gameId">The game id of the game you wish to connect to. This value can be found in the admin panel.</param>
            <param name="username">The username of the new user.</param>
            <param name="password">The password of the new user.</param>
            <param name="email">The email of the new user. (optional)</param>
            <param name="captchaKey">(only if captcha is required) The key of the Captcha image used to get the user to write in the Captcha value</param>
            <param name="captchaValue">(only if captcha is required) The string the user entered in response to the captcha image</param>
            <param name="extraData">Any extra data that you wish to store with the user such as gender, birthdate, etc. (optional)</param>
            <param name="partnerId">The PartnerPay partner id this user should be tagged with, if you are using the PartnerPay system.</param>
            <param name="successCallback">Callback with the connected client, if successful</param>
            <param name="errorCallback">Callback with details about why the registration failed, if it failed.</param>
        </member>
        <member name="M:PlayerIOClient.QuickConnect.SimpleRecoverPassword(System.String,System.String)">
            <summary>Initiates the password recovery process for a user. The user must have supplied an email address during registration.</summary>
            <param name="gameId">The game id of the game the user is registered in.</param>
            <param name="usernameOrEmail">The username or email address of the user that wishes to recover his password.</param>
        </member>
        <member name="M:PlayerIOClient.QuickConnect.SimpleRecoverPassword(System.String,System.String,PlayerIOClient.Callback)">
            <summary>Initiates the password recovery process for a user. The user must have supplied an email address during registration.</summary>
            <param name="gameId">The game id of the game the user is registered in.</param>
            <param name="usernameOrEmail">The username or email address of the user that wishes to recover his password.</param>
            <param name="successCallback">Callback if successful</param>
        </member>
        <member name="M:PlayerIOClient.QuickConnect.SimpleRecoverPassword(System.String,System.String,PlayerIOClient.Callback,PlayerIOClient.Callback{PlayerIOClient.PlayerIOError})">
            <summary>Initiates the password recovery process for a user. The user must have supplied an email address during registration.</summary>
            <param name="gameId">The game id of the game the user is registered in.</param>
            <param name="usernameOrEmail">The username or email address of the user that wishes to recover his password.</param>
            <param name="successCallback">Callback if successful</param>
            <param name="errorCallback">Callback that will be called instead of successCallback if an error occurs.</param>
        </member>
        <member name="M:PlayerIOClient.QuickConnect.FacebookOAuthConnect(System.String,System.String,System.String)">
            <summary>Authenticates a Facebook user using a Facebook access_token.</summary>
            <param name="gameId">The game id of the game you wish to connect to. This value can be found in the admin panel</param>
            <param name="access_token">The Facebook access_token for the user.</param>
            <param name="partnerId">The PartnerPay partner id this user should be tagged with, if you are using the PartnerPay system.</param>
            <returns>The connected client</returns>
        </member>
        <member name="M:PlayerIOClient.QuickConnect.FacebookOAuthConnect(System.String,System.String,System.String,PlayerIOClient.Callback{PlayerIOClient.Client})">
            <summary>Authenticates a Facebook user using a Facebook access_token.</summary>
            <param name="gameId">The game id of the game you wish to connect to. This value can be found in the admin panel</param>
            <param name="access_token">The Facebook access_token for the user.</param>
            <param name="partnerId">The PartnerPay partner id this user should be tagged with, if you are using the PartnerPay system.</param>
            <param name="successCallback">Callback with the connected client, if successful</param>
        </member>
        <member name="M:PlayerIOClient.QuickConnect.FacebookOAuthConnect(System.String,System.String,System.String,PlayerIOClient.Callback{PlayerIOClient.Client},PlayerIOClient.Callback{PlayerIOClient.PlayerIOError})">
            <summary>Authenticates a Facebook user using a Facebook access_token.</summary>
            <param name="gameId">The game id of the game you wish to connect to. This value can be found in the admin panel</param>
            <param name="access_token">The Facebook access_token for the user.</param>
            <param name="partnerId">The PartnerPay partner id this user should be tagged with, if you are using the PartnerPay system.</param>
            <param name="successCallback">Callback with the connected client, if successful</param>
            <param name="errorCallback">Callback that will be called instead of successCallback if an error occurs.</param>
        </member>
        <member name="M:PlayerIOClient.QuickConnect.KongregateConnect(System.String,System.String,System.String)">
            <summary>Authenticates a Kongregate user and returns a connection token.</summary>
            <param name="gameId">The game id of the game you wish to connect to. This value can be found in the admin panel</param>
            <param name="userId">The Kongregate user id of the user you wish to authenticate.</param>
            <param name="gameAuthToken">The Kongregate game auth token of the user's session.</param>
            <returns>The connected client</returns>
        </member>
        <member name="M:PlayerIOClient.QuickConnect.KongregateConnect(System.String,System.String,System.String,PlayerIOClient.Callback{PlayerIOClient.Client})">
            <summary>Authenticates a Kongregate user and returns a connection token.</summary>
            <param name="gameId">The game id of the game you wish to connect to. This value can be found in the admin panel</param>
            <param name="userId">The Kongregate user id of the user you wish to authenticate.</param>
            <param name="gameAuthToken">The Kongregate game auth token of the user's session.</param>
            <param name="successCallback">Callback with the connected client, if successful</param>
        </member>
        <member name="M:PlayerIOClient.QuickConnect.KongregateConnect(System.String,System.String,System.String,PlayerIOClient.Callback{PlayerIOClient.Client},PlayerIOClient.Callback{PlayerIOClient.PlayerIOError})">
            <summary>Authenticates a Kongregate user and returns a connection token.</summary>
            <param name="gameId">The game id of the game you wish to connect to. This value can be found in the admin panel</param>
            <param name="userId">The Kongregate user id of the user you wish to authenticate.</param>
            <param name="gameAuthToken">The Kongregate game auth token of the user's session.</param>
            <param name="successCallback">Callback with the connected client, if successful</param>
            <param name="errorCallback">Callback that will be called instead of successCallback if an error occurs.</param>
        </member>
        <member name="M:PlayerIOClient.Web.Get(System.String)">
            <summary>Perform a HTTP Get request.</summary>
            <param name="url">The url to request, including querystring arguments (if any)</param>
            <returns>The http response returned from the remote server</returns>
        </member>
        <member name="M:PlayerIOClient.Web.Get(System.String,PlayerIOClient.Callback{PlayerIOClient.HttpResponse})">
            <summary>Perform a HTTP Get request.</summary>
            <param name="url">The url to request, including querystring arguments (if any)</param>
            <param name="successCallback">Callback with a stream of the returned page</param>
        </member>
        <member name="M:PlayerIOClient.Web.Get(System.String,PlayerIOClient.Callback{PlayerIOClient.HttpResponse},PlayerIOClient.Callback{PlayerIOClient.PlayerIOError})">
            <summary>Perform a HTTP Get request.</summary>
            <param name="url">The url to request, including querystring arguments (if any)</param>
            <param name="successCallback">Callback with a stream of the returned page</param>
            <param name="errorCallback">Callback that will be called instead of successCallback if an error occurs during the request.</param>
        </member>
        <member name="M:PlayerIOClient.Web.Post(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>Perform a HTTP Get request.</summary>
            <param name="url">The url to request, including querystring arguments (if any)</param>
            <param name="post">The values to post to the given url</param>
            <returns>The http response returned from the remote server</returns>
        </member>
        <member name="M:PlayerIOClient.Web.Post(System.String,System.Collections.Generic.Dictionary{System.String,System.String},PlayerIOClient.Callback{PlayerIOClient.HttpResponse})">
            <summary>Perform a HTTP Post request.</summary>
            <param name="url">The url to request, including querystring arguments (if any)</param>
            <param name="post">The values to post to the given url</param>
            <param name="successCallback">Callback with a stream of the returned page</param>
        </member>
        <member name="M:PlayerIOClient.Web.Post(System.String,System.Collections.Generic.Dictionary{System.String,System.String},PlayerIOClient.Callback{PlayerIOClient.HttpResponse},PlayerIOClient.Callback{PlayerIOClient.PlayerIOError})">
            <summary>Perform a HTTP Post request.</summary>
            <param name="url">The url to request, including querystring arguments (if any)</param>
            <param name="post">The values to post to the given url</param>
            <param name="successCallback">Callback with a stream of the returned page</param>
            <param name="errorCallback">Callback that will be called instead of successCallback if an error occurs during the request.</param>
        </member>
        <member name="T:PlayerIOClient.Internal.MPB.CodedInputStream">
            <summary>
            Readings and decodes protocol message fields.
            </summary>
            <remarks>
            This class contains two kinds of methods:  methods that read specific
            protocol message constructs and field types (e.g. ReadTag and
            ReadInt32) and methods that read low-level values (e.g.
            ReadRawVarint32 and ReadRawBytes).  If you are reading encoded protocol
            messages, you should use the former methods, but if you are reading some
            other format of your own design, use the latter. The names of the former
            methods are taken from the protocol buffer type names, not .NET types.
            (Hence ReadFloat instead of ReadSingle, and ReadBool instead of ReadBoolean.)
            
            TODO(jonskeet): Consider whether recursion and size limits shouldn't be readonly,
            set at construction time.
            </remarks>
        </member>
        <member name="F:PlayerIOClient.Internal.MPB.CodedInputStream.totalBytesRetired">
            <summary>
            The total number of bytes read before the current buffer. The
            total bytes read up to the current position can be computed as
            totalBytesRetired + bufferPos.
            </summary>
        </member>
        <member name="F:PlayerIOClient.Internal.MPB.CodedInputStream.currentLimit">
            <summary>
            The absolute position of the end of the current message.
            </summary> 
        </member>
        <member name="F:PlayerIOClient.Internal.MPB.CodedInputStream.recursionLimit">
            <summary>
            <see cref="M:PlayerIOClient.Internal.MPB.CodedInputStream.SetRecursionLimit(System.Int32)"/>
            </summary>
        </member>
        <member name="F:PlayerIOClient.Internal.MPB.CodedInputStream.sizeLimit">
            <summary>
            <see cref="M:PlayerIOClient.Internal.MPB.CodedInputStream.SetSizeLimit(System.Int32)"/>
            </summary>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedInputStream.CreateInstance(System.IO.Stream)">
            <summary>
            Creates a new CodedInputStream reading data from the given
            stream.
            </summary>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedInputStream.CreateInstance(System.Byte[])">
            <summary>
            Creates a new CodedInputStream reading data from the given
            byte array.
            </summary>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedInputStream.ReadTag">
            <summary>
            Attempt to read a field tag, returning 0 if we have reached the end
            of the input data. Protocol message parsers use this to read tags,
            since a protocol message may legally end wherever a tag occurs, and
            zero is not a valid tag number.
            </summary>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedInputStream.ReadDouble">
            <summary>
            Read a double field from the stream.
            </summary>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedInputStream.ReadFloat">
            <summary>
            Read a float field from the stream.
            </summary>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedInputStream.ReadUInt64">
            <summary>
            Read a uint64 field from the stream.
            </summary>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedInputStream.ReadInt64">
            <summary>
            Read an int64 field from the stream.
            </summary>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedInputStream.ReadInt32">
            <summary>
            Read an int32 field from the stream.
            </summary>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedInputStream.ReadFixed64">
            <summary>
            Read a fixed64 field from the stream.
            </summary>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedInputStream.ReadFixed32">
            <summary>
            Read a fixed32 field from the stream.
            </summary>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedInputStream.ReadBool">
            <summary>
            Read a bool field from the stream.
            </summary>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedInputStream.ReadString">
            <summary>
            Reads a string field from the stream.
            </summary>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedInputStream.ReadBytes">
            <summary>
            Reads a bytes field value from the stream.
            </summary>   
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedInputStream.ReadUInt32">
            <summary>
            Reads a uint32 field value from the stream.
            </summary>   
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedInputStream.ReadEnum">
            <summary>
            Reads an enum field value from the stream. The caller is responsible
            for converting the numeric value to an actual enum.
            </summary>   
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedInputStream.ReadSFixed32">
            <summary>
            Reads an sfixed32 field value from the stream.
            </summary>   
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedInputStream.ReadSFixed64">
            <summary>
            Reads an sfixed64 field value from the stream.
            </summary>   
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedInputStream.ReadSInt32">
            <summary>
            Reads an sint32 field value from the stream.
            </summary>   
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedInputStream.ReadSInt64">
            <summary>
            Reads an sint64 field value from the stream.
            </summary>   
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedInputStream.SlowReadRawVarint32">
            <summary>
            Same code as ReadRawVarint32, but read each byte individually, checking for
            buffer overflow.
            </summary>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedInputStream.ReadRawVarint32">
            <summary>
            Read a raw Varint from the stream.  If larger than 32 bits, discard the upper bits.
            This method is optimised for the case where we've got lots of data in the buffer.
            That means we can check the size just once, then just read directly from the buffer
            without constant rechecking of the buffer length.
            </summary>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedInputStream.ReadRawVarint32(System.IO.Stream)">
            <summary>
            Reads a varint from the input one byte at a time, so that it does not
            read any bytes after the end of the varint. If you simply wrapped the
            stream in a CodedInputStream and used ReadRawVarint32(Stream)}
            then you would probably end up reading past the end of the varint since
            CodedInputStream buffers its input.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedInputStream.ReadRawVarint64">
            <summary>
            Read a raw varint from the stream.
            </summary>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedInputStream.ReadRawLittleEndian32">
            <summary>
            Read a 32-bit little-endian integer from the stream.
            </summary>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedInputStream.ReadRawLittleEndian64">
            <summary>
            Read a 64-bit little-endian integer from the stream.
            </summary>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedInputStream.DecodeZigZag32(System.UInt32)">
            <summary>
            Decode a 32-bit value with ZigZag encoding.
            </summary>
            <remarks>
            ZigZag encodes signed integers into values that can be efficiently
            encoded with varint.  (Otherwise, negative values must be 
            sign-extended to 64 bits to be varint encoded, thus always taking
            10 bytes on the wire.)
            </remarks>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedInputStream.DecodeZigZag64(System.UInt64)">
            <summary>
            Decode a 32-bit value with ZigZag encoding.
            </summary>
            <remarks>
            ZigZag encodes signed integers into values that can be efficiently
            encoded with varint.  (Otherwise, negative values must be 
            sign-extended to 64 bits to be varint encoded, thus always taking
            10 bytes on the wire.)
            </remarks>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedInputStream.SetRecursionLimit(System.Int32)">
            <summary>
            Set the maximum message recursion depth.
            </summary>
            <remarks>
            In order to prevent malicious
            messages from causing stack overflows, CodedInputStream limits
            how deeply messages may be nested.  The default limit is 64.
            </remarks>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedInputStream.SetSizeLimit(System.Int32)">
            <summary>
            Set the maximum message size.
            </summary>
            <remarks>
            In order to prevent malicious messages from exhausting memory or
            causing integer overflows, CodedInputStream limits how large a message may be.
            The default limit is 64MB.  You should set this limit as small
            as you can without harming your app's functionality.  Note that
            size limits only apply when reading from an InputStream, not
            when constructed around a raw byte array (nor with ByteString.NewCodedInput).
            If you want to read several messages from a single CodedInputStream, you
            can call ResetSizeCounter() after each message to avoid hitting the
            size limit.
            </remarks>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedInputStream.ResetSizeCounter">
            <summary>
            Resets the current size counter to zero (see SetSizeLimit).
            </summary>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedInputStream.PushLimit(System.Int32)">
            <summary>
            Sets currentLimit to (current position) + byteLimit. This is called
            when descending into a length-delimited embedded message. The previous
            limit is returned.
            </summary>
            <returns>The old limit.</returns>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedInputStream.PopLimit(System.Int32)">
            <summary>
            Discards the current limit, returning the previous limit.
            </summary>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedInputStream.RefillBuffer(System.Boolean)">
            <summary>
            Called when buffer is empty to read more bytes from the
            input.  If <paramref name="mustSucceed"/> is true, RefillBuffer() gurantees that
            either there will be at least one byte in the buffer when it returns
            or it will throw an exception.  If <paramref name="mustSucceed"/> is false,
            RefillBuffer() returns false if no more bytes were available.
            </summary>
            <param name="mustSucceed"></param>
            <returns></returns>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedInputStream.SkipField(System.UInt32)">
            <summary>
            Reads and discards a single field, given its tag value.
            </summary>
            <returns>false if the tag is an end-group tag, in which case
            nothing is skipped. Otherwise, returns true.</returns>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedInputStream.SkipMessage">
            <summary>
            Reads and discards an entire message.  This will read either until EOF
            or until an endgroup tag, whichever comes first.
            </summary>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedInputStream.SkipImpl(System.Int32)">
            <summary>
            Abstraction of skipping to cope with streams which can't really skip.
            </summary>
        </member>
        <member name="P:PlayerIOClient.Internal.MPB.CodedInputStream.ReachedLimit">
            <summary>
            Returns whether or not all the data before the limit has been read.
            </summary>
            <returns></returns>
        </member>
        <member name="P:PlayerIOClient.Internal.MPB.CodedInputStream.IsAtEnd">
            <summary>
            Returns true if the stream has reached the end of the input. This is the
            case if either the end of the underlying input source has been reached or
            the stream has reached a limit created using PushLimit.
            </summary>
        </member>
        <member name="T:PlayerIOClient.Internal.MPB.CodedOutputStream">
            <summary>
            Encodes and writes protocol message fields.
            </summary>
            <remarks>
            This class contains two kinds of methods:  methods that write specific
            protocol message constructs and field types (e.g. WriteTag and
            WriteInt32) and methods that write low-level values (e.g.
            WriteRawVarint32 and WriteRawBytes).  If you are writing encoded protocol
            messages, you should use the former methods, but if you are writing some
            other format of your own design, use the latter. The names of the former
            methods are taken from the protocol buffer type names, not .NET types.
            (Hence WriteFloat instead of WriteSingle, and WriteBool instead of WriteBoolean.)
            </remarks>
        </member>
        <member name="F:PlayerIOClient.Internal.MPB.CodedOutputStream.DefaultBufferSize">
            <summary>
            The buffer size used by CreateInstance(Stream).
            </summary>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedOutputStream.CreateInstance(System.IO.Stream)">
            <summary>
            Creates a new CodedOutputStream which write to the given stream.
            </summary>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedOutputStream.CreateInstance(System.IO.Stream,System.Int32)">
            <summary>
            Creates a new CodedOutputStream which write to the given stream and uses
            the specified buffer size.
            </summary>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedOutputStream.CreateInstance(System.Byte[])">
            <summary>
            Creates a new CodedOutputStream that writes directly to the given
            byte array. If more bytes are written than fit in the array,
            OutOfSpaceException will be thrown.
            </summary>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedOutputStream.CreateInstance(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Creates a new CodedOutputStream that writes directly to the given
            byte array slice. If more bytes are written than fit in the array,
            OutOfSpaceException will be thrown.
            </summary>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedOutputStream.WriteDouble(System.Int32,System.Double)">
            <summary>
            Writes a double field value, including tag, to the stream.
            </summary>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedOutputStream.WriteFloat(System.Int32,System.Single)">
            <summary>
            Writes a float field value, including tag, to the stream.
            </summary>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedOutputStream.WriteUInt64(System.Int32,System.UInt64)">
            <summary>
            Writes a uint64 field value, including tag, to the stream.
            </summary>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedOutputStream.WriteInt64(System.Int32,System.Int64)">
            <summary>
            Writes an int64 field value, including tag, to the stream.
            </summary>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedOutputStream.WriteInt32(System.Int32,System.Int32)">
            <summary>
            Writes an int32 field value, including tag, to the stream.
            </summary>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedOutputStream.WriteFixed64(System.Int32,System.UInt64)">
            <summary>
            Writes a fixed64 field value, including tag, to the stream.
            </summary>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedOutputStream.WriteFixed32(System.Int32,System.UInt32)">
            <summary>
            Writes a fixed32 field value, including tag, to the stream.
            </summary>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedOutputStream.WriteBool(System.Int32,System.Boolean)">
            <summary>
            Writes a bool field value, including tag, to the stream.
            </summary>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedOutputStream.WriteString(System.Int32,System.String)">
            <summary>
            Writes a string field value, including tag, to the stream.
            </summary>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedOutputStream.WriteUInt32(System.Int32,System.UInt32)">
            <summary>
            Writes a group field value, including tag, to the stream.
            </summary>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedOutputStream.WriteDoubleNoTag(System.Double)">
            <summary>
            Writes a double field value, including tag, to the stream.
            </summary>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedOutputStream.WriteFloatNoTag(System.Single)">
            <summary>
            Writes a float field value, without a tag, to the stream.
            </summary>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedOutputStream.WriteUInt64NoTag(System.UInt64)">
            <summary>
            Writes a uint64 field value, without a tag, to the stream.
            </summary>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedOutputStream.WriteInt64NoTag(System.Int64)">
            <summary>
            Writes an int64 field value, without a tag, to the stream.
            </summary>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedOutputStream.WriteInt32NoTag(System.Int32)">
            <summary>
            Writes an int32 field value, without a tag, to the stream.
            </summary>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedOutputStream.WriteFixed64NoTag(System.UInt64)">
            <summary>
            Writes a fixed64 field value, without a tag, to the stream.
            </summary>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedOutputStream.WriteFixed32NoTag(System.UInt32)">
            <summary>
            Writes a fixed32 field value, without a tag, to the stream.
            </summary>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedOutputStream.WriteBoolNoTag(System.Boolean)">
            <summary>
            Writes a bool field value, without a tag, to the stream.
            </summary>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedOutputStream.WriteStringNoTag(System.String)">
            <summary>
            Writes a string field value, without a tag, to the stream.
            </summary>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedOutputStream.WriteBytesNoTag(System.Byte[])">
            <summary>
            Writes a group field value, without a tag, to the stream.
            </summary>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedOutputStream.WriteTag(System.Int32,PlayerIOClient.Internal.MPB.WireType)">
            <summary>
            Encodes and writes a tag.
            </summary>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedOutputStream.WriteRawVarint32(System.UInt32)">
            <summary>
            Writes a 32 bit value as a varint. The fast route is taken when
            there's enough buffer space left to whizz through without checking
            for each byte; otherwise, we resort to calling WriteRawByte each time.
            </summary>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedOutputStream.WriteRawBytes(System.Byte[])">
            <summary>
            Writes out an array of bytes.
            </summary>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedOutputStream.WriteRawBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes out part of an array of bytes.
            </summary>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedOutputStream.ComputeDoubleSize(System.Int32,System.Double)">
            <summary>
            Compute the number of bytes that would be needed to encode a
            double field, including the tag.
            </summary>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedOutputStream.ComputeFloatSize(System.Int32,System.Single)">
            <summary>
            Compute the number of bytes that would be needed to encode a
            float field, including the tag.
            </summary>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedOutputStream.ComputeUInt64Size(System.Int32,System.UInt64)">
            <summary>
            Compute the number of bytes that would be needed to encode a
            uint64 field, including the tag.
            </summary>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedOutputStream.ComputeInt64Size(System.Int32,System.Int64)">
            <summary>
            Compute the number of bytes that would be needed to encode an
            int64 field, including the tag.
            </summary>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedOutputStream.ComputeInt32Size(System.Int32,System.Int32)">
            <summary>
            Compute the number of bytes that would be needed to encode an
            int32 field, including the tag.
            </summary>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedOutputStream.ComputeFixed64Size(System.Int32,System.UInt64)">
            <summary>
            Compute the number of bytes that would be needed to encode a
            fixed64 field, including the tag.
            </summary>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedOutputStream.ComputeFixed32Size(System.Int32,System.UInt32)">
            <summary>
            Compute the number of bytes that would be needed to encode a
            fixed32 field, including the tag.
            </summary>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedOutputStream.ComputeBoolSize(System.Int32,System.Boolean)">
            <summary>
            Compute the number of bytes that would be needed to encode a
            bool field, including the tag.
            </summary>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedOutputStream.ComputeStringSize(System.Int32,System.String)">
            <summary>
            Compute the number of bytes that would be needed to encode a
            string field, including the tag.
            </summary>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedOutputStream.ComputeBytesSize(System.Int32,System.Byte[])">
            <summary>
            Compute the number of bytes that would be needed to encode a
            bytes field, including the tag.
            </summary>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedOutputStream.ComputeUInt32Size(System.Int32,System.UInt32)">
            <summary>
            Compute the number of bytes that would be needed to encode a
            uint32 field, including the tag.
            </summary>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedOutputStream.ComputeEnumSize(System.Int32,System.Int32)">
            <summary>
            Compute the number of bytes that would be needed to encode a
            enum field, including the tag. The caller is responsible for
            converting the enum value to its numeric value.
            </summary>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedOutputStream.ComputeSFixed32Size(System.Int32,System.Int32)">
            <summary>
            Compute the number of bytes that would be needed to encode an
            sfixed32 field, including the tag.
            </summary>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedOutputStream.ComputeSFixed64Size(System.Int32,System.Int64)">
            <summary>
            Compute the number of bytes that would be needed to encode an
            sfixed64 field, including the tag.
            </summary>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedOutputStream.ComputeSInt32Size(System.Int32,System.Int32)">
            <summary>
            Compute the number of bytes that would be needed to encode an
            sint32 field, including the tag.
            </summary>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedOutputStream.ComputeSInt64Size(System.Int32,System.Int64)">
            <summary>
            Compute the number of bytes that would be needed to encode an
            sint64 field, including the tag.
            </summary>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedOutputStream.ComputeDoubleSizeNoTag(System.Double)">
            <summary>
            Compute the number of bytes that would be needed to encode a
            double field, including the tag.
            </summary>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedOutputStream.ComputeFloatSizeNoTag(System.Single)">
            <summary>
            Compute the number of bytes that would be needed to encode a
            float field, including the tag.
            </summary>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedOutputStream.ComputeUInt64SizeNoTag(System.UInt64)">
            <summary>
            Compute the number of bytes that would be needed to encode a
            uint64 field, including the tag.
            </summary>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedOutputStream.ComputeInt64SizeNoTag(System.Int64)">
            <summary>
            Compute the number of bytes that would be needed to encode an
            int64 field, including the tag.
            </summary>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedOutputStream.ComputeInt32SizeNoTag(System.Int32)">
            <summary>
            Compute the number of bytes that would be needed to encode an
            int32 field, including the tag.
            </summary>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedOutputStream.ComputeFixed64SizeNoTag(System.UInt64)">
            <summary>
            Compute the number of bytes that would be needed to encode a
            fixed64 field, including the tag.
            </summary>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedOutputStream.ComputeFixed32SizeNoTag(System.UInt32)">
            <summary>
            Compute the number of bytes that would be needed to encode a
            fixed32 field, including the tag.
            </summary>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedOutputStream.ComputeBoolSizeNoTag(System.Boolean)">
            <summary>
            Compute the number of bytes that would be needed to encode a
            bool field, including the tag.
            </summary>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedOutputStream.ComputeStringSizeNoTag(System.String)">
            <summary>
            Compute the number of bytes that would be needed to encode a
            string field, including the tag.
            </summary>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedOutputStream.ComputeBytesSizeNoTag(System.Byte[])">
            <summary>
            Compute the number of bytes that would be needed to encode a
            bytes field, including the tag.
            </summary>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedOutputStream.ComputeUInt32SizeNoTag(System.UInt32)">
            <summary>
            Compute the number of bytes that would be needed to encode a
            uint32 field, including the tag.
            </summary>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedOutputStream.ComputeEnumSizeNoTag(System.Int32)">
            <summary>
            Compute the number of bytes that would be needed to encode a
            enum field, including the tag. The caller is responsible for
            converting the enum value to its numeric value.
            </summary>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedOutputStream.ComputeSFixed32SizeNoTag(System.Int32)">
            <summary>
            Compute the number of bytes that would be needed to encode an
            sfixed32 field, including the tag.
            </summary>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedOutputStream.ComputeSFixed64SizeNoTag(System.Int64)">
            <summary>
            Compute the number of bytes that would be needed to encode an
            sfixed64 field, including the tag.
            </summary>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedOutputStream.ComputeSInt32SizeNoTag(System.Int32)">
            <summary>
            Compute the number of bytes that would be needed to encode an
            sint32 field, including the tag.
            </summary>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedOutputStream.ComputeSInt64SizeNoTag(System.Int64)">
            <summary>
            Compute the number of bytes that would be needed to encode an
            sint64 field, including the tag.
            </summary>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedOutputStream.ComputeRawVarint32Size(System.UInt32)">
            <summary>
            Compute the number of bytes that would be needed to encode a varint.
            </summary>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedOutputStream.ComputeRawVarint64Size(System.UInt64)">
            <summary>
            Compute the number of bytes that would be needed to encode a varint.
            </summary>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedOutputStream.ComputeTagSize(System.Int32)">
            <summary>
            Compute the number of bytes that would be needed to encode a tag.
            </summary>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedOutputStream.EncodeZigZag32(System.Int32)">
            <summary>
            Encode a 32-bit value with ZigZag encoding.
            </summary>
            <remarks>
            ZigZag encodes signed integers into values that can be efficiently
            encoded with varint.  (Otherwise, negative values must be 
            sign-extended to 64 bits to be varint encoded, thus always taking
            10 bytes on the wire.)
            </remarks>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedOutputStream.EncodeZigZag64(System.Int64)">
            <summary>
            Encode a 64-bit value with ZigZag encoding.
            </summary>
            <remarks>
            ZigZag encodes signed integers into values that can be efficiently
            encoded with varint.  (Otherwise, negative values must be 
            sign-extended to 64 bits to be varint encoded, thus always taking
            10 bytes on the wire.)
            </remarks>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.CodedOutputStream.CheckNoSpaceLeft">
            <summary>
            Verifies that SpaceLeft returns zero. It's common to create a byte array
            that is exactly big enough to hold a message, then write to it with
            a CodedOutputStream. Calling CheckNoSpaceLeft after writing verifies that
            the message was actually as big as expected, which can help bugs.
            </summary>
        </member>
        <member name="P:PlayerIOClient.Internal.MPB.CodedOutputStream.SpaceLeft">
            <summary>
            If writing to a flat array, returns the space left in the array. Otherwise,
            throws an InvalidOperationException.
            </summary>
        </member>
        <member name="T:PlayerIOClient.Internal.MPB.CodedOutputStream.OutOfSpaceException">
            <summary>
            Indicates that a CodedOutputStream wrapping a flat byte array
            ran out of space.
            </summary>
        </member>
        <member name="T:PlayerIOClient.Internal.MPB.WireFormat">
            <summary>
            This class is used internally by the Protocol Buffer Library and generated
            message implementations. It is public only for the sake of those generated
            messages. Others should not use this class directly.
            <para>
            This class contains constants and helper functions useful for dealing with
            the Protocol Buffer wire format.
            </para>
            </summary>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.WireFormat.GetTagWireType(System.UInt32)">
            <summary>
            Given a tag value, determines the wire type (lower 3 bits).
            </summary>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.WireFormat.GetTagFieldNumber(System.UInt32)">
            <summary>
            Given a tag value, determines the field number (the upper 29 bits).
            </summary>
        </member>
        <member name="M:PlayerIOClient.Internal.MPB.WireFormat.MakeTag(System.Int32,PlayerIOClient.Internal.MPB.WireType)">
            <summary>
            Makes a tag value given a field number and wire type.
            TODO(jonskeet): Should we just have a Tag structure?
            </summary>
        </member>
        <member name="T:PlayerIOClient.BuyItemInfo">
            <summary>
            Represents information about the purchase of a PayVault item.
            <para>The minimum information necessary to create an instance of this class is an itemKey representing the PayVaultItem that should be purchased.</para>
            <para>It is also possible to add a custom payload, and this data will always be present when reading the item from the user's Vault. 
            For example: Imagine that we have a racing game and users should be able to buy different cars of different colors, but that color doesn't affect the price
            of the car. Instead of creating one PayVaultItem for each combination of type and color, we need only create one item for each type and give them
            a different price, and color can then be added in the payload when buying a car.</para>
            <para>Setting the payload works exactly like manipulating a DatabaseObject from BigDB.</para>
            <code>
            //Buy a red 'simplecar' with stripes.
            client.PayVault.Buy(true, new BuyItemInfo[]{
            	new BuyItemInfo("simplecar").Set("Color", "Red").Set("Stripes", true)
            }, null);
            </code>
            </summary>
        </member>
        <member name="M:PlayerIOClient.BuyItemInfo.#ctor(System.String)">
            <summary>
            Creates a new BuyItemInfo to describe an item to purchase.
            </summary>
            <param name="itemKey">They key of the underlying item in the PayVaultItems table.</param>
        </member>
        <member name="M:PlayerIOClient.BuyItemInfo.Clear">
            <summary>Removes all properties on this object</summary>
        </member>
        <member name="M:PlayerIOClient.BuyItemInfo.Remove(System.String)">
            <summary>Removes the value of the given property from this object</summary>
        </member>
        <member name="M:PlayerIOClient.BuyItemInfo.Contains(System.String)">
            <summary>Returns true if the given property exists on this object</summary>
        </member>
        <member name="M:PlayerIOClient.BuyItemInfo.TryGetValue(System.String,System.Object@)">
            <summary>If the given property exists, this method returns true and the value as object in the out parameter. If it does not, this method return false</summary>
        </member>
        <member name="M:PlayerIOClient.BuyItemInfo.GetValue(System.String)">
            <summary>Get the given property as an object</summary>
        </member>
        <member name="M:PlayerIOClient.BuyItemInfo.GetString(System.String)">
            <summary>Get the given string property</summary>
        </member>
        <member name="M:PlayerIOClient.BuyItemInfo.GetString(System.String,System.String)">
            <summary>Get the given string property, falling back to the given default value if the string property does not exist</summary>
        </member>
        <member name="M:PlayerIOClient.BuyItemInfo.GetInt(System.String)">
            <summary>Get the given int property</summary>
        </member>
        <member name="M:PlayerIOClient.BuyItemInfo.GetInt(System.String,System.Int32)">
            <summary>Get the given int property, falling back to the given default value if the int property does not exist</summary>
        </member>
        <member name="M:PlayerIOClient.BuyItemInfo.GetUInt(System.String)">
            <summary>Get the given uint property</summary>
        </member>
        <member name="M:PlayerIOClient.BuyItemInfo.GetUInt(System.String,System.UInt32)">
            <summary>Get the given uint property, falling back to the given default value if the uint property does not exist</summary>
        </member>
        <member name="M:PlayerIOClient.BuyItemInfo.GetLong(System.String)">
            <summary>Get the given long property</summary>
        </member>
        <member name="M:PlayerIOClient.BuyItemInfo.GetLong(System.String,System.Int64)">
            <summary>Get the given long property, falling back to the given default value if the long property does not exist</summary>
        </member>
        <member name="M:PlayerIOClient.BuyItemInfo.GetBool(System.String)">
            <summary>Get the given bool property</summary>
        </member>
        <member name="M:PlayerIOClient.BuyItemInfo.GetBool(System.String,System.Boolean)">
            <summary>Get the given bool property, falling back to the given default value if the bool property does not exist</summary>
        </member>
        <member name="M:PlayerIOClient.BuyItemInfo.GetFloat(System.String)">
            <summary>Get the given float property</summary>
        </member>
        <member name="M:PlayerIOClient.BuyItemInfo.GetFloat(System.String,System.Single)">
            <summary>Get the given float property, falling back to the given default value if the float property does not exist</summary>
        </member>
        <member name="M:PlayerIOClient.BuyItemInfo.GetDouble(System.String)">
            <summary>Get the given double property</summary>
        </member>
        <member name="M:PlayerIOClient.BuyItemInfo.GetDouble(System.String,System.Double)">
            <summary>Get the given double property, falling back to the given default value if the double property does not exist</summary>
        </member>
        <member name="M:PlayerIOClient.BuyItemInfo.GetBytes(System.String)">
            <summary>Get the given byte array property</summary>
        </member>
        <member name="M:PlayerIOClient.BuyItemInfo.GetBytes(System.String,System.Byte[])">
            <summary>Get the given byte array property, falling back to the given default value if the byte array property does not exist</summary>
        </member>
        <member name="M:PlayerIOClient.BuyItemInfo.GetDateTime(System.String)">
            <summary>Get the given datetime property</summary>
        </member>
        <member name="M:PlayerIOClient.BuyItemInfo.GetDateTime(System.String,System.DateTime)">
            <summary>Get the given datetime property, falling back to the given default value if the datetime property does not exist</summary>
        </member>
        <member name="M:PlayerIOClient.BuyItemInfo.GetObject(System.String)">
            <summary>Get the given object property</summary>
        </member>
        <member name="M:PlayerIOClient.BuyItemInfo.GetArray(System.String)">
            <summary>Get the given array property</summary>
        </member>
        <member name="M:PlayerIOClient.BuyItemInfo.Set(System.String,System.String)">
            <summary>Set the given property to the given string value</summary>
        </member>
        <member name="M:PlayerIOClient.BuyItemInfo.Set(System.String,System.Int32)">
            <summary>Set the given property to the given int value</summary>
        </member>
        <member name="M:PlayerIOClient.BuyItemInfo.Set(System.String,System.UInt32)">
            <summary>Set the given property to the given uint value</summary>
        </member>
        <member name="M:PlayerIOClient.BuyItemInfo.Set(System.String,System.Int64)">
            <summary>Set the given property to the given long value</summary>
        </member>
        <member name="M:PlayerIOClient.BuyItemInfo.Set(System.String,System.Boolean)">
            <summary>Set the given property to the given bool value</summary>
        </member>
        <member name="M:PlayerIOClient.BuyItemInfo.Set(System.String,System.Single)">
            <summary>Set the given property to the given float value</summary>
        </member>
        <member name="M:PlayerIOClient.BuyItemInfo.Set(System.String,System.Double)">
            <summary>Set the given property to the given double value</summary>
        </member>
        <member name="M:PlayerIOClient.BuyItemInfo.Set(System.String,System.Byte[])">
            <summary>Set the given property to the given byte array value</summary>
        </member>
        <member name="M:PlayerIOClient.BuyItemInfo.Set(System.String,System.DateTime)">
            <summary>Set the given property to the given datetime value</summary>
        </member>
        <member name="M:PlayerIOClient.BuyItemInfo.Set(System.String,PlayerIOClient.DatabaseObject)">
            <summary>Set the given property to the given object</summary>
        </member>
        <member name="M:PlayerIOClient.BuyItemInfo.Set(System.String,PlayerIOClient.DatabaseArray)">
            <summary>Set the given property to the given array</summary>
        </member>
        <member name="P:PlayerIOClient.BuyItemInfo.Count">
            <summary>Returns the number of properties on this object</summary>
        </member>
        <member name="P:PlayerIOClient.BuyItemInfo.Item(System.String)">
            <summary>Get the given property as an object</summary>
        </member>
        <member name="P:PlayerIOClient.BuyItemInfo.Properties">
            <summary>Get the names of all properties on this object</summary>
        </member>
        <member name="F:PlayerIOClient.ErrorCode.UnsupportedMethod">
            <summary>The method requested is not supported</summary>
        </member>
        <member name="F:PlayerIOClient.ErrorCode.GeneralError">
            <summary>A general error occurred</summary>
        </member>
        <member name="F:PlayerIOClient.ErrorCode.InternalError">
            <summary>An unexpected error occurred inside the Player.IO webservice. Please try again.</summary>
        </member>
        <member name="F:PlayerIOClient.ErrorCode.AccessDenied">
            <summary>Access is denied</summary>
        </member>
        <member name="F:PlayerIOClient.ErrorCode.InvalidMessageFormat">
            <summary>The message is malformatted</summary>
        </member>
        <member name="F:PlayerIOClient.ErrorCode.MissingValue">
            <summary>A value is missing</summary>
        </member>
        <member name="F:PlayerIOClient.ErrorCode.GameRequired">
            <summary>A game is required to do this action</summary>
        </member>
        <member name="F:PlayerIOClient.ErrorCode.ExternalError">
            <summary>An error occurred while contacting an external service</summary>
        </member>
        <member name="F:PlayerIOClient.ErrorCode.ArgumentOutOfRange">
            <summary>The given argument value is outside the range of allowed values.</summary>
        </member>
        <member name="F:PlayerIOClient.ErrorCode.InvalidType">
            <summary>The given type was invalid</summary>
        </member>
        <member name="F:PlayerIOClient.ErrorCode.IndexOutOfBounds">
            <summary>The index was out of bounds from the range of acceptable values</summary>
        </member>
        <member name="F:PlayerIOClient.ErrorCode.GameDisabled">
            <summary>The game has been disabled, most likely because of missing payment.</summary>
        </member>
        <member name="F:PlayerIOClient.ErrorCode.UnknownGame">
            <summary>The game requested is not known by the server</summary>
        </member>
        <member name="F:PlayerIOClient.ErrorCode.UnknownConnection">
            <summary>The connection requested is not known by the server</summary>
        </member>
        <member name="F:PlayerIOClient.ErrorCode.InvalidAuth">
            <summary>The auth given is invalid or malformatted</summary>
        </member>
        <member name="F:PlayerIOClient.ErrorCode.NoServersAvailable">
            <summary>There is no server in any of the selected server clusters for the game that are eligible to start a new room in (they're all at full capacity or there are no servers in any of the clusters). Either change the selected clusters for your game in the admin panel, try again later or start some more servers for one of your clusters.</summary>
        </member>
        <member name="F:PlayerIOClient.ErrorCode.RoomDataTooLarge">
            <summary>The room data for the room was over the allowed size limit</summary>
        </member>
        <member name="F:PlayerIOClient.ErrorCode.RoomAlreadyExists">
            <summary>You are unable to create room because there is already a room with the specified id</summary>
        </member>
        <member name="F:PlayerIOClient.ErrorCode.UnknownRoomType">
            <summary>The game you're connected to does not have a room type with the specified name</summary>
        </member>
        <member name="F:PlayerIOClient.ErrorCode.UnknownRoom">
            <summary>There is no room running with that id</summary>
        </member>
        <member name="F:PlayerIOClient.ErrorCode.MissingRoomId">
            <summary>You can't join the room when the RoomID is null or the empty string</summary>
        </member>
        <member name="F:PlayerIOClient.ErrorCode.RoomIsFull">
            <summary>The room already has the maxmium amount of users in it.</summary>
        </member>
        <member name="F:PlayerIOClient.ErrorCode.NotASearchColumn">
            <summary>The key you specified is not set as searchable. You can change the searchable keys in the admin panel for the server type</summary>
        </member>
        <member name="F:PlayerIOClient.ErrorCode.QuickConnectMethodNotEnabled">
            <summary>The QuickConnect method (simple, facebook, kongregate...) is not enabled for the game. You can enable the various methods in the admin panel for the game</summary>
        </member>
        <member name="F:PlayerIOClient.ErrorCode.UnknownUser">
            <summary>The user is unknown</summary>
        </member>
        <member name="F:PlayerIOClient.ErrorCode.InvalidPassword">
            <summary>The password supplied is incorrect</summary>
        </member>
        <member name="F:PlayerIOClient.ErrorCode.InvalidRegistrationData">
            <summary>The supplied data is incorrect</summary>
        </member>
        <member name="F:PlayerIOClient.ErrorCode.InvalidBigDBKey">
            <summary>The key given for the BigDB object is not a valid BigDB key. BigDB keys must be between 1 and 50 word characters (no spaces).</summary>
        </member>
        <member name="F:PlayerIOClient.ErrorCode.BigDBObjectTooLarge">
            <summary>The object exceeds the maximum allowed size for BigDB objects.</summary>
        </member>
        <member name="F:PlayerIOClient.ErrorCode.BigDBObjectDoesNotExist">
            <summary>Could not locate the database object.</summary>
        </member>
        <member name="F:PlayerIOClient.ErrorCode.UnknownTable">
            <summary>The specified table does not exist.</summary>
        </member>
        <member name="F:PlayerIOClient.ErrorCode.UnknownIndex">
            <summary>The specified index does not exist.</summary>
        </member>
        <member name="F:PlayerIOClient.ErrorCode.InvalidIndexValue">
            <summary>The value given for the index, does not match the expected type.</summary>
        </member>
        <member name="F:PlayerIOClient.ErrorCode.NotObjectCreator">
            <summary>The operation was aborted because the user attempting the operation was not the original creator of the object accessed.</summary>
        </member>
        <member name="F:PlayerIOClient.ErrorCode.KeyAlreadyUsed">
            <summary>The key is in use by another database object</summary>
        </member>
        <member name="F:PlayerIOClient.ErrorCode.StaleVersion">
            <summary>BigDB object could not be saved using optimistic locks as it's out of date.</summary>
        </member>
        <member name="F:PlayerIOClient.ErrorCode.CircularReference">
            <summary>Cannot create circular references inside database objects</summary>
        </member>
        <member name="F:PlayerIOClient.ErrorCode.HeartbeatFailed">
            <summary>The server could not complete the heartbeat</summary>
        </member>
        <member name="F:PlayerIOClient.ErrorCode.InvalidGameCode">
            <summary>The game code is invalid</summary>
        </member>
        <member name="F:PlayerIOClient.ErrorCode.VaultNotLoaded">
            <summary>Cannot access coins or items before vault has been loaded. Please refresh the vault first.</summary>
        </member>
        <member name="F:PlayerIOClient.ErrorCode.UnknownPayVaultProvider">
            <summary>There is no PayVault provider with the specified id</summary>
        </member>
        <member name="F:PlayerIOClient.ErrorCode.DirectPurchaseNotSupportedByProvider">
            <summary>The specified PayVault provider does not support direct purchase</summary>
        </member>
        <member name="F:PlayerIOClient.ErrorCode.BuyingCoinsNotSupportedByProvider">
            <summary>The specified PayVault provider does not support buying coins</summary>
        </member>
        <member name="F:PlayerIOClient.ErrorCode.NotEnoughCoins">
            <summary>The user does not have enough coins in the PayVault to complete the purchase or debit.</summary>
        </member>
        <member name="F:PlayerIOClient.ErrorCode.ItemNotInVault">
            <summary>The item does not exist in the vault.</summary>
        </member>
        <member name="F:PlayerIOClient.ErrorCode.InvalidPurchaseArguments">
            <summary>The chosen provider rejected one or more of the purchase arguments</summary>
        </member>
        <member name="F:PlayerIOClient.ErrorCode.InvalidPayVaultProviderSetup">
            <summary>The chosen provider is not configured correctly in the admin panel</summary>
        </member>
        <member name="F:PlayerIOClient.ErrorCode.UnknownPartnerPayAction">
            <summary>Unable to locate the custom PartnerPay action with the given key</summary>
        </member>
        <member name="T:PlayerIOClient.Message">
            <summary>
            Represents a message sent between client and server.
            
            <para>A message consists of a string type, and a 
            payload of zero or more typed parameters.</para>
            
            <para>For example here we create a simple message that we send to the server indicating that this player is ready:</para>
            <code>
            // message of type ready with no payload
            Message m = Message.Create("ready"); 
            	 
            // send the message to the server
            connection.Send(m);
            </code>
            <para>Usually, it's much easier to simply use the convenience methods:</para>
            <code>
            // send the server a message of which maps this player selected
            connection.Send("mapsselected", "fields-of-glory", "small-skirmish");
            
            // send a chat message to the server, that it broadcasts
            connection.Send("chat", "Hey guys, are you ready to start the game?");
            </code>
            <para>You can also build up messages as you go, if you don't know the exact payload until runtime.</para>
            <para>In this example, imagine the player has multiple pieces and we send in the list of moves this player wants to do in a single turn.</para>
            <code>
            // create a new message of type moves
            Message m = Message.Create("moves"); 
            
            // add all the currently connected userids to the message
            foreach(var move in Moves) {
            	m.Add(move.PieceId, move.X, move.Y);
            }
            
            // send the message to the server
            connection.Send(m);
            </code>
            </summary>
        </member>
        <member name="M:PlayerIOClient.Message.Create(System.String,System.Object[])">
            <summary>Create a new Message</summary>
            <param name="type">The type of message to create.</param>
            <param name="parameters">A variable list of the data to add to the message.</param>
            <returns></returns>
        </member>
        <member name="M:PlayerIOClient.Message.GetString(System.UInt32)">
            <summary>Gets the string at the given index</summary><param name="index">The index to find the entry in</param>
        </member>
        <member name="M:PlayerIOClient.Message.GetByteArray(System.UInt32)">
            <summary>Gets the byte[] at the given index</summary><param name="index">The index to find the entry in</param>
        </member>
        <member name="M:PlayerIOClient.Message.GetBoolean(System.UInt32)">
            <summary>Gets the bool at the given index</summary><param name="index">The index to find the entry in</param>
        </member>
        <member name="M:PlayerIOClient.Message.GetDouble(System.UInt32)">
            <summary>Gets the double at the given index</summary><param name="index">The index to find the entry in</param>
        </member>
        <member name="M:PlayerIOClient.Message.GetFloat(System.UInt32)">
            <summary>Gets the float at the given index</summary><param name="index">The index to find the entry in</param>
        </member>
        <member name="M:PlayerIOClient.Message.GetInteger(System.UInt32)">
            <summary>Gets the int at the given index</summary><param name="index">The index to find the entry in</param>
        </member>
        <member name="M:PlayerIOClient.Message.GetInt(System.UInt32)">
            <summary>Gets the int at the given index</summary><param name="index">The index to find the entry in</param>
        </member>
        <member name="M:PlayerIOClient.Message.GetUInt(System.UInt32)">
            <summary>Gets the uint at the given index</summary><param name="index">The index to find the entry in</param>
        </member>
        <member name="M:PlayerIOClient.Message.GetUnsignedInteger(System.UInt32)">
            <summary>Gets the uint at the given index</summary><param name="index">The index to find the entry in</param>
        </member>
        <member name="M:PlayerIOClient.Message.GetLong(System.UInt32)">
            <summary>Gets the long at the given index</summary><param name="index">The index to find the entry in</param>
        </member>
        <member name="M:PlayerIOClient.Message.GetULong(System.UInt32)">
            <summary>Gets the ulong at the given index</summary><param name="index">The index to find the entry in</param>
        </member>
        <member name="M:PlayerIOClient.Message.GetUnsignedLong(System.UInt32)">
            <summary>Gets the ulong at the given index</summary><param name="index">The index to find the entry in</param>
        </member>
        <member name="M:PlayerIOClient.Message.Add(System.String)">
            <summary>Add a string to the message payload </summary><param name="value">the value to add</param>
        </member>
        <member name="M:PlayerIOClient.Message.Add(System.Int32)">
            <summary>Add a int to the message payload </summary><param name="value">the value to add</param>
        </member>
        <member name="M:PlayerIOClient.Message.Add(System.UInt32)">
            <summary>Add a uint to the message payload </summary><param name="value">the value to add</param>
        </member>
        <member name="M:PlayerIOClient.Message.Add(System.Int64)">
            <summary>Add a long to the message payload </summary><param name="value">the value to add</param>
        </member>
        <member name="M:PlayerIOClient.Message.Add(System.UInt64)">
            <summary>Add a ulong to the message payload </summary><param name="value">the value to add</param>
        </member>
        <member name="M:PlayerIOClient.Message.Add(System.Byte[])">
            <summary>Add a byte[] to the message payload </summary><param name="value">the value to add</param>
        </member>
        <member name="M:PlayerIOClient.Message.Add(System.Single)">
            <summary>Add a float to the message payload </summary><param name="value">the value to add</param>
        </member>
        <member name="M:PlayerIOClient.Message.Add(System.Double)">
            <summary>Add a double to the message payload </summary><param name="value">the value to add</param>
        </member>
        <member name="M:PlayerIOClient.Message.Add(System.Boolean)">
            <summary>Add a bool to the message payload </summary><param name="value">the value to add</param>
        </member>
        <member name="M:PlayerIOClient.Message.Add(System.Object[])">
            <summary>
            Add multiple pieces of data to the message in one go.
            </summary>
            <example>
            Adding a string, a number and two boolean values to the message.
            <code>somemessage.Add("a string", 1234, true, false)</code>
            </example>
            <param name="parameters">The data to add to the message</param>
        </member>
        <member name="P:PlayerIOClient.Message.Type">
            <summary>The type of the current message</summary>
        </member>
        <member name="P:PlayerIOClient.Message.Count">
            <summary>The number of data entries in the message, excluding the type.</summary>
        </member>
        <member name="P:PlayerIOClient.Message.Item(System.UInt32)">
            <summary>Get the data stored in the mesage at the given index</summary>
        </member>
        <member name="T:PlayerIOClient.ServerEndpoint">
            <summary>
            The address and port where a server can be reached.
            </summary>
        </member>
        <member name="P:PlayerIOClient.ServerEndpoint.Address">
            <summary>The address/hostname of the server</summary>
        </member>
        <member name="P:PlayerIOClient.ServerEndpoint.Port">
            <summary>The port of the server</summary>
        </member>
        <member name="P:PlayerIOClient.RoomInfo.Id">
            <summary>The id of the room</summary>
        </member>
        <member name="P:PlayerIOClient.RoomInfo.RoomType">
            <summary>The type of the room (coresponding to the [RoomType(...)] attribute assignd to the room)</summary>
        </member>
        <member name="P:PlayerIOClient.RoomInfo.OnlineUsers">
            <summary>How many users are currently in the room</summary>
        </member>
        <member name="P:PlayerIOClient.RoomInfo.RoomData">
            <summary>The current room data for the room</summary>
        </member>
        <member name="T:PlayerIOClient.PlayerIORegistrationError">
            <summary>
            If there are any errors when using the SimpleRegister method of QuickConnect, you will get 
            back an error object of this type that holds more detail about the cause of the error. 
            You can use this information to provide better help for your users when they are 
            filling out your registration form.
            </summary>
        </member>
        <member name="P:PlayerIOClient.PlayerIORegistrationError.UsernameError">
            <summary>The error for the username field, if any.</summary>
        </member>
        <member name="P:PlayerIOClient.PlayerIORegistrationError.PasswordError">
            <summary>The error for the password field, if any.</summary>
        </member>
        <member name="P:PlayerIOClient.PlayerIORegistrationError.EmailError">
            <summary>The error for the email field, if any.</summary>
        </member>
        <member name="P:PlayerIOClient.PlayerIORegistrationError.CaptchaError">
            <summary>The error for the captcha field, if any.</summary>
        </member>
        <member name="P:PlayerIOClient.SimpleGetCaptchaOutput.CaptchaKey">
            <summary>The key for this captcha image. This value must be kept and sent to the simpleRegister() method along with the string from the user</summary>
        </member>
        <member name="P:PlayerIOClient.SimpleGetCaptchaOutput.CaptchaImageUrl">
            <summary>An url for the captcha image. You must show the image to the user, and ask what text is shown in the image.</summary>
        </member>
        <member name="P:PlayerIOClient.HttpResponse.StatusCode">
            <summary>The status code returned from the remote web server</summary>
        </member>
        <member name="P:PlayerIOClient.HttpResponse.ResponseStream">
            <summary>A stream with the body of the http response</summary>
        </member>
        <member name="P:PlayerIOClient.HttpResponse.Text">
            <summary>The response stream read as an UTF8 string</summary>
        </member>
        <member name="T:PlayerIOClient.Client">
             <summary>
             Access class to the various Player.IO services.
             <para>Here are some examples on how to work with the client:</para>
             <code>
             //Connect to Player.IO
             var client = PlayerIO.Connect(
            		"[Enter your game id here]",
            		"public",
            		"user-id",
            		null,
            		null
            	);
            	
             //Join a multiplayer room
             var connection = client.Multiplayer.CreateJoinRoom(
            		"my-room-id", 
            		"bounce", 
            		true, 
            		null, 
            		null
            	);	
            
             //Load an object from BigDB
             client.BigDB.Load("Users", client.ConnectUserId, delegate (DatabaseObject r){
            		if (r != null) {
            			//...
            		}
             });
             
             //Write something to the error log
             client.ErrorLog.WriteError("Something bad happened...");
             </code>	
             </summary>
        </member>
        <member name="P:PlayerIOClient.Client.ConnectUserId">
            <summary>
            The ConnectUserId of this client
            </summary>
        </member>
        <member name="P:PlayerIOClient.Client.Multiplayer">
            <summary>
            Property used to access the Multiplayer service.
            </summary>
        </member>
        <member name="P:PlayerIOClient.Client.Web">
            <summary>
            Property used to access the Http Request service.
            </summary>
        </member>
        <member name="P:PlayerIOClient.Client.BigDB">
            <summary>
            Property used to access the BigDB service.
            </summary>
        </member>
        <member name="P:PlayerIOClient.Client.ErrorLog">
            <summary>
            Property used to access the ErrorLog service.
            </summary>
        </member>
        <member name="P:PlayerIOClient.Client.GameFS">
            <summary>
            Property used to access the GameFS service.
            </summary>
        </member>
        <member name="P:PlayerIOClient.Client.PartnerPay">
            <summary>
            Property used to access the PartnerPay service.
            </summary>
        </member>
        <member name="P:PlayerIOClient.Client.PayVault">
            <summary>
            Property used to access the PayVault service.
            </summary>
        </member>
        <member name="T:PlayerIOClient.PlayerIO">
            <summary>
            Entry class for the initial connection to Player.IO
            <para>Here is an example of using the class to connect to Player.IO</para>
            <code>
            //Connect to Player.IO
            var client = PlayerIO.Connect(
            	"[Enter your game id here]",
            	"public",
            	"user-id",
            	null,
            	null
            );
            </code>
            </summary>
        </member>
        <member name="M:PlayerIOClient.PlayerIO.CalcAuth(System.String,System.String)">
            <summary>Calculate an auth hash for use in the Connect method</summary>
            <param name="userId">The userid to use when generating the hash</param>
            <param name="sharedSecret">The shared secret to use when generating the hash. This must be the same value as the one given to a connection in the admin panel.</param>
            <returns>The generated auth hash</returns>
        </member>
        <member name="M:PlayerIOClient.PlayerIO.Connect(System.String,System.String,System.String,System.String,System.String)">
            <summary>Connects to Player.IO using as the given user</summary>
            <param name="gameId">The game id of the game you wish to connect to. This value can be found in the admin panel</param>
            <param name="connectionId">The id of the connection, as given in the settings section of the admin panel. 'public' should be used as the default</param>
            <param name="userId">The id of the user connecting. This can be any string you like.</param>
            <param name="auth">If the connection identified by ConnectionIdentifier only accepts authenticated requests, the auth value generated based on UserId is added here. You can generate an auth value using the CalcAuth() method.</param>
            <param name="partnerId">The PartnerPay partner id this user should be tagged with, if you are using the PartnerPay system.</param>
            <returns>A UserClient object from which Player.IO can be accessed.</returns>
        </member>
        <member name="M:PlayerIOClient.PlayerIO.Connect(System.String,System.String,System.String,System.String,System.String,PlayerIOClient.Callback{PlayerIOClient.Client})">
            <summary>Connects to Player.IO using as the given user</summary>
            <param name="gameId">The game id of the game you wish to connect to. This value can be found in the admin panel</param>
            <param name="connectionId">The id of the connection, as given in the settings section of the admin panel. 'public' should be used as the default</param>
            <param name="userId">The id of the user connecting. This can be any string you like.</param>
            <param name="auth">If the connection identified by ConnectionIdentifier only accepts authenticated requests, the auth value generated based on UserId is added here. You can generate an auth value using the CalcAuth() method.</param>
            <param name="partnerId">The PartnerPay partner id this user should be tagged with, if you are using the PartnerPay system.</param>
            <param name="successCallback">Callback with the client object when connected</param>
        </member>
        <member name="M:PlayerIOClient.PlayerIO.Connect(System.String,System.String,System.String,System.String,System.String,PlayerIOClient.Callback{PlayerIOClient.Client},PlayerIOClient.Callback{PlayerIOClient.PlayerIOError})">
            <summary>Connects to Player.IO using as the given user</summary>
            <param name="gameId">The game id of the game you wish to connect to. This value can be found in the admin panel</param>
            <param name="connectionId">The id of the connection, as given in the settings section of the admin panel. 'public' should be used as the default</param>
            <param name="userId">The id of the user connecting. This can be any string you like.</param>
            <param name="auth">If the connection identified by ConnectionIdentifier only accepts authenticated requests, the auth value generated based on UserId is added here. You can generate an auth value using the CalcAuth() method.</param>
            <param name="partnerId">The PartnerPay partner id this user should be tagged with, if you are using the PartnerPay system.</param>
            <param name="successCallback">Callback with the client object when connected</param>
            <param name="errorCallback">Callback that will be called instead of successCallback if an error occurs during the connect.</param>
        </member>
        <member name="P:PlayerIOClient.PlayerIO.QuickConnect">
            <summary>
            Property used to access the QuickConnect service.
            </summary>
        </member>
        <member name="M:PlayerIO.ServerCore.SocketLibrary.SocketListener.AddListener(System.Int32)">
            <summary>
            sets up listeners on all ips on the given port
            </summary>
        </member>
        <member name="T:PlayerIOClient.Connection">
             <summary>
             A connection into a running Player.IO multiplayer room
             <para>Here is an example of joining a multiplayer room and listening to all messages</para>
             <code>
             var client = PlayerIO.Connect(
             	"[Enter your game id here]",
             	"public",				
             	"user-id",			
             	null			
             );
             
             // join a multiplayer room
             var connection = client.Multiplayer.CreateJoinRoom(
            		"my-room-id", 
            		"bounce", 
            		true, 
            		null, 
            		null
            	);
             Console.WriteLine("Joined Multiplayer Room");
            
             // on message => print to console
             connection.OnMessage += delegate(object sender, PlayerIOClient.Message m) {
             	Console.WriteLine(m.ToString());
             };
            
             // when disconnected => print reason
             connection.OnDisconnect += delegate(object sender, string reason) {
            		Console.WriteLine("Disconnected, reason = " + reason);
             };
             </code>
             </summary>
        </member>
        <member name="M:PlayerIOClient.Connection.AddOnMessage(PlayerIOClient.MessageReceivedEventHandler)">
            <summary>Add a message handler to the OnMessage event</summary>
        </member>
        <member name="M:PlayerIOClient.Connection.AddOnDisconnect(PlayerIOClient.DisconnectEventHandler)">
            <summary>Add a disconnect handler to the OnDisconnect event</summary>
        </member>
        <member name="M:PlayerIOClient.Connection.Disconnect">
            <summary>Disconnect from the game room</summary>
        </member>
        <member name="M:PlayerIOClient.Connection.Send(PlayerIOClient.Message)">
            <summary>Send a message to the connected client</summary>
            <param name="message">The message to send</param>
        </member>
        <member name="M:PlayerIOClient.Connection.Send(System.String,System.Object[])">
            <summary>
            Send a message to the connected client without first having to construct a Message object.
            </summary>
            <param name="type">The type of message to send</param>
            <param name="parameters">The data to put in the message to send</param>
        </member>
        <member name="P:PlayerIOClient.Connection.Connected">
            <summary>Is the connection currently connected to a remote host?</summary>
        </member>
        <member name="E:PlayerIOClient.Connection.OnMessage">
            <summary>Event fired everytime a message is received.</summary>
        </member>
        <member name="E:PlayerIOClient.Connection.OnDisconnect">
            <summary>Event fired when the connection is disconnected.</summary>
        </member>
    </members>
</doc>
